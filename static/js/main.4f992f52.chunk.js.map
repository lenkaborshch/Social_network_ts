{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/Dialogs/DialogItem/DialogItem.module.css","img/cover.jpg","components/Profile/MyPosts/Post/Post.module.css","img/penguin.png","img/preloader.svg","img/planet.png","api/api.ts","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","serviceWorker.ts","components/Navbar/Sidebar/SidebarContainer.tsx","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/common/Preloader/Preloader.tsx","components/common/hoc/WithAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","pageSize","currentPage","get","then","res","data","userId","delete","post","authAPI","initialState","posts","id","v1","message","likesCount","newPostText","profile","setUserPage","type","dialogs","name","messages","author","src","newMessageText","friends","users","totalCount","isFetching","followingInProgress","toggleIsFetching","toggleIsFollowing","login","email","isAuth","rootReducer","combineReducers","profilePage","state","action","newPost","newText","dialogsPage","newMessage","sidebar","usersPage","map","u","followed","filter","auth","store","createStore","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","SidebarContainer","connect","props","sidebarFriends","f","className","style","sidebarFriend","key","alt","friendName","sidebarWrapper","Navbar","item","to","activeClassName","active","ProfileInfo","photo","photos","large","userPhoto","aboutMe","lookingForAJob","cover","descriptionBlock","fullName","statusJob","Post","post_image","MyPostsContainer","updateNewPostText","addPost","postsElement","p","placeholder","value","onChange","e","currentTarget","onKeyPress","preventDefault","onClick","Preloader","textAlign","preloader","mapStateToProps","withAuthRedirect","WrappedComponent","restProps","ProfileContainer","this","params","getProfile","React","Component","compose","dispatch","withRouter","Header","header","logo","loginBlock","HeaderContainer","getAuthUserData","resultCode","setAuthUserData","Users","Math","ceil","pages","i","push","width","small","disabled","some","unfollow","follow","status","onPageChanged","UsersContainer","page","setCurrentPage","getUsers","followSuccess","unfollowSuccess","items","DialogItem","dialog","Message","wrapperMessage","avatar","messageText","updateNewMessageText","addMessage","dialogsElements","d","messagesElements","m","dialogsItems","sendingMessage","onKeyDown","Login","App","path","render","DialogsContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4f992f52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__qDSm_\",\"item\":\"Navbar_item__Ol8Vw\",\"active\":\"Navbar_active__1ovz8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileInfo_cover__1xOCn\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bFes7\",\"userPhoto\":\"ProfileInfo_userPhoto__GLNwp\",\"statusJob\":\"ProfileInfo_statusJob__3xCCN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"Message_wrapperMessage__2PR9y\",\"message\":\"Message_message__1xARY\",\"avatar\":\"Message_avatar__2YUgg\",\"author\":\"Message_author__27nww\",\"messageText\":\"Message_messageText__35SWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3r3JM\",\"dialogsItems\":\"Dialogs_dialogsItems__3TVHB\",\"messages\":\"Dialogs_messages__IgtER\",\"dialog\":\"Dialogs_dialog__1igoW\",\"active\":\"Dialogs_active__1GCOK\",\"sendingMessage\":\"Dialogs_sendingMessage__ZrzXj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__2ASsN\",\"sidebarFriend\":\"Sidebar_sidebarFriend__UFX9C\",\"friendName\":\"Sidebar_friendName__6VNDb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Users_currentPage__1vt-F\",\"pages\":\"Users_pages__1BN_F\",\"userPhoto\":\"Users_userPhoto__2mxbf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1EQNb\",\"loginBlock\":\"Header_loginBlock__1u_pe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__Bw4WD\",\"active\":\"DialogItem_active__3BwCn\"};","module.exports = __webpack_public_path__ + \"static/media/cover.258dc82d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2muiw\"};","module.exports = __webpack_public_path__ + \"static/media/penguin.20594e02.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.81210c49.svg\";","module.exports = __webpack_public_path__ + \"static/media/planet.1ab0b265.png\";","import axios from 'axios'\r\nimport {UserType} from '../redux/usersReducer'\r\nimport {ProfileType} from '../redux/profileReducer'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '1b7c72fc-c879-4275-88e5-e33388eb8130',\r\n    }\r\n})\r\n\r\ntype GetUsersType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\ntype GetUserData = {\r\n    data: {\r\n        id: number\r\n        login: string\r\n        email: string\r\n    }\r\n    fieldsErrors: []\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\ntype FollowUnfollowUserType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: {}\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers: (pageSize: number, currentPage: number) => {\r\n        return instance.get<GetUsersType>(`users?count=${pageSize}&page=${currentPage}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow: (userId: number) => {\r\n        return instance.delete<FollowUnfollowUserType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    follow: (userId: number) => {\r\n        return instance.post<FollowUnfollowUserType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getProfile: (userId: string) => {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me: () => {\r\n        return instance.get<GetUserData>(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n}","import {ActionsTypes, AppStateType} from './reduxStore'\r\nimport {v1} from 'uuid'\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\r\nimport {usersAPI} from '../api/api'\r\n\r\nconst ADD_POST = 'ADD_POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\r\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE'\r\n\r\nexport type ProfileType = {\r\n    'aboutMe': null | string\r\n    'contacts': {\r\n        'facebook': null | string\r\n        'website': null | string\r\n        'vk': null | string\r\n        'twitter': null | string\r\n        'instagram': null | string\r\n        'youtube': null | string\r\n        'github': null | string\r\n        'mainLink': null | string\r\n    },\r\n    'lookingForAJob': boolean\r\n    'lookingForAJobDescription': null | string\r\n    'fullName': null | string\r\n    'userId': number\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    }\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    profile: null | ProfileType\r\n}\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nconst initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hey', likesCount: '20'},\r\n        {id: v1(), message: 'How are you?', likesCount: '2'}\r\n    ],\r\n    newPostText: '',\r\n    profile: null\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: '0'\r\n            }\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [newPost, ...state.posts]\r\n            }\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        case SET_USERS_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPost = (): AddPostActionType => ({type: ADD_POST})\r\nexport const updateNewPostText = (newText: string): UpdateNewPostTextActionType => ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText\r\n})\r\nexport const setUserPage = (profile: ProfileType): SetUsersPageActionType => ({\r\n    type: SET_USERS_PROFILE,\r\n    profile\r\n})\r\n\r\nexport const getProfile = (userId: string): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>): void => {\r\n        usersAPI.getProfile(userId)\r\n            .then((res) => {\r\n                dispatch(setUserPage(res.data))\r\n            })\r\n    }\r\n}\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST\r\n}\r\n\r\ntype UpdateNewPostTextActionType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n}\r\ntype SetUsersPageActionType = {\r\n    type: typeof SET_USERS_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>","import {v1} from 'uuid'\r\nimport {ActionsTypes} from './reduxStore'\r\n\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Vadim'},\r\n        {id: v1(), name: 'Mama'},\r\n        {id: v1(), name: 'Papa'},\r\n        {id: v1(), name: 'Yurii'},\r\n        {id: v1(), name: 'Nik'},\r\n    ],\r\n    messages: [\r\n        {\r\n            id: v1(),\r\n            message: 'Hey',\r\n            author: {\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            }\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: 'How are you?',\r\n            author: {\r\n                name: 'Me',\r\n                src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n            }\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: 'Good luck',\r\n            author: {\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            }\r\n        },\r\n    ],\r\n    newMessageText: ''\r\n}\r\n\r\nexport type DialogsPageType = typeof initialState\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let newMessage = {\r\n                id: v1(),\r\n                message: state.newMessageText,\r\n                author: {\r\n                    name: 'Me',\r\n                    src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        }\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newMessageText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (): AddMessageActionType => ({type: SEND_MESSAGE})\r\n\r\nexport const updateNewMessageText = (newMessageText: string): UpdateNewMessageTextActionType => ({\r\n    type: UPDATE_NEW_MESSAGE_TEXT,\r\n    newMessageText\r\n})\r\n\r\ntype AddMessageActionType = {\r\n    type: typeof SEND_MESSAGE\r\n}\r\n\r\ntype UpdateNewMessageTextActionType = {\r\n    type: typeof UPDATE_NEW_MESSAGE_TEXT\r\n    newMessageText: string\r\n}","import {ActionsTypes} from './reduxStore'\r\nimport {v1} from 'uuid'\r\n\r\nexport type FriendType = {\r\n    id: string\r\n    name: string\r\n    src: string\r\n}\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {\r\n            id: v1(),\r\n            name: 'Vadim',\r\n            src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Busya',\r\n            src: 'https://i.pinimg.com/originals/1c/ba/1e/1cba1e5e40356f6edb0235c8a09a07d5.jpg'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Freud',\r\n            src: 'https://pbs.twimg.com/profile_images/1173161429266030592/lJCNA_JC_400x400.jpg'\r\n        }\r\n    ]\r\n}\r\n\r\nexport type SidebarType = typeof initialState\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes): SidebarType => {\r\n    return state\r\n}","import {ActionsTypes, AppStateType} from './reduxStore'\r\nimport {usersAPI} from '../api/api'\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING = 'TOGGLE_IS_FOLLOWING'\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\nconst initialState = {\r\n    users: [] as Array<UserType>, // or ||\r\n    totalCount: 0,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n}\r\n\r\nexport type UsersPageType = typeof initialState\r\n\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users})\r\nexport const setTotalCount = (totalCount: number): setTotalCountActionType => ({type: SET_TOTAL_COUNT, totalCount})\r\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingActionType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const toggleIsFollowing = (userId: number, isFetching: boolean): toggleIsFollowingActionType => ({\r\n    type: TOGGLE_IS_FOLLOWING,\r\n    userId,\r\n    isFetching\r\n})\r\n\r\nexport const getUsers = (pageSize: number, currentPage: number): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>): void => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(pageSize, currentPage)\r\n            .then((res) => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(res.items))\r\n                dispatch(setTotalCount(res.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>): void => {\r\n        dispatch(toggleIsFollowing(userId, true))\r\n        usersAPI.unfollow(userId).then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleIsFollowing(userId, false))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>): void => {\r\n        dispatch(toggleIsFollowing(userId, true))\r\n        usersAPI.follow(userId).then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleIsFollowing(userId, false))\r\n        })\r\n    }\r\n}\r\n\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\n\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\n\r\ntype setTotalCountActionType = {\r\n    type: typeof SET_TOTAL_COUNT\r\n    totalCount: number\r\n}\r\n\r\ntype setCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\n\r\ntype toggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\n\r\ntype toggleIsFollowingActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING\r\n    userId: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>","import {ActionsTypes, AppStateType} from './reduxStore'\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\r\nimport {authAPI} from '../api/api'\r\n\r\nconst SET_USER_AUTH_DATA = 'SET_USER_AUTH_DATA'\r\n\r\nexport type UserAuthDataType = {\r\n    id: null | number\r\n    login: null | string\r\n    email: null | string\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: UserAuthDataType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: UserAuthDataType = initialState, action: ActionsTypes): UserAuthDataType => {\r\n    switch (action.type) {\r\n        case SET_USER_AUTH_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number, login: string, email: string): AddPostActionType => {\r\n    return {\r\n        type: SET_USER_AUTH_DATA,\r\n        data: {id, login, email}\r\n    }\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>): void => {\r\n        authAPI.me().then(res => {\r\n                if (res.resultCode === 0) {\r\n                    let {id, login, email} = res.data\r\n                    dispatch(setAuthUserData(id, login, email))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype AddPostActionType = {\r\n    type: typeof SET_USER_AUTH_DATA\r\n    data: {\r\n        id: number\r\n        login: string\r\n        email: string\r\n    }\r\n}\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {addPost, profileReducer, setUserPage, updateNewPostText} from './profileReducer'\r\nimport {addMessage, dialogsReducer, updateNewMessageText} from './dialogsReducer'\r\nimport {sidebarReducer} from './sidebarReducer'\r\nimport {\r\n    followSuccess,\r\n    setCurrentPage,\r\n    setTotalCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    toggleIsFollowing,\r\n    unfollowSuccess,\r\n    usersReducer\r\n} from './usersReducer'\r\nimport {useDispatch as _useDispatch} from 'react-redux'\r\nimport {authReducer, setAuthUserData} from './authReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof updateNewPostText>\r\n    | ReturnType<typeof addMessage>\r\n    | ReturnType<typeof updateNewMessageText>\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setTotalCount>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setUserPage>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleIsFollowing>\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer // это типизация самой функции === (state: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\n// for DialogsWithHooks\r\ninterface IRootState extends AppStateType {\r\n} // нужно называть именно IRootState!!!\r\n\r\nexport const selectDialogsPage = (state: IRootState) => state.dialogsPage // вместо mapStateToProps\r\nexport function useDispatch() { // вместо mapDispatchToProps\r\n    const dispatch = _useDispatch()\r\n    return (ac: ActionsTypes) => dispatch(ac)\r\n}\r\n\r\n// благодаря useSelector и useDispatch можно не использовать connect","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {Sidebar} from './Sidebar'\r\nimport {AppStateType} from '../../../redux/reduxStore'\r\nimport {connect} from 'react-redux'\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    friends: state.sidebar.friends\r\n})\r\n\r\nexport const SidebarContainer = connect(mapStateToProps)(Sidebar)","import React from 'react'\r\nimport style from './Sidebar.module.css'\r\nimport {FriendType} from '../../../redux/sidebarReducer'\r\n\r\ntype SidebarPropsType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nexport function Sidebar(props: SidebarPropsType) {\r\n    let sidebarFriends = props.friends.map(f => {\r\n        return (\r\n            <div className={style.sidebarFriend} key={f.id}>\r\n                <img src={f.src} alt='friendsPhoto'/>\r\n                <p className={style.friendName}>{f.name} </p>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className={style.sidebarWrapper}>\r\n            <h3>Friends</h3>\r\n            {sidebarFriends}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport style from './Navbar.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {SidebarContainer} from './Sidebar/SidebarContainer'\r\n\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div className={style.item}>\r\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/dialogs' activeClassName={style.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/news' activeClassName={style.active}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/music' activeClassName={style.active}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/settings' activeClassName={style.active}>Settings</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/users' activeClassName={style.active}>Users</NavLink>\r\n            </div>\r\n            <div>\r\n                <SidebarContainer/>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import cover from '../../../img/cover.jpg'\r\nimport React from 'react'\r\nimport style from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profileReducer'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    const photo = props.profile.photos.large\r\n        ? <img className={style.userPhoto} src={props.profile.photos.large} alt='userImage'/>\r\n        : <img className={style.userPhoto} src='https://www.meme-arsenal.com/memes/18fc6121a90eb592850a5722ee98a963.jpg'\r\n               alt='userImage'/>\r\n\r\n    const aboutMe = props.profile.aboutMe && <span>Обо мне: {props.profile.aboutMe}</span>\r\n    const lookingForAJob = props.profile.lookingForAJob\r\n        ? <img src='https://i.pinimg.com/originals/e2/02/4c/e2024c7b6af9d0b137ccc9918c36aac1.jpg' alt='notJobImg'/>\r\n        : <img src='https://www.meme-arsenal.com/memes/8d9abed4e883de1f5b20a14386eb9d38.jpg' alt='jobImg'/>\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={style.cover} src={cover} alt='coverImage'/>\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n                <div>{photo}</div>\r\n                <div>\r\n                    <p>Имя: {props.profile.fullName}</p>\r\n                    <p>{aboutMe}</p>\r\n                    В поисках работы: <p className={style.statusJob}>{lookingForAJob}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport style from './Post.module.css'\r\nimport post_image from './../../../../img/penguin.png'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={post_image} alt='postImage'/>\r\n            {props.message}\r\n            <div>\r\n                {props.likesCount} <span>❤</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import {addPost, PostType, updateNewPostText} from '../../../redux/profileReducer'\r\nimport {MyPosts} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../redux/reduxStore'\r\n\r\n\r\ntype MapStatePropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchType = {\r\n    updateNewPostText: (value: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    newPostText: state.profilePage.newPostText,\r\n    posts: state.profilePage.posts\r\n})\r\n\r\nexport const MyPostsContainer = connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\r\n(mapStateToProps, {updateNewPostText, addPost})(MyPosts)","import React, {ChangeEvent} from 'react'\r\nimport style from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport {PostType} from '../../../redux/profileReducer'\r\n\r\ntype MyPostsPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    updateNewPostText: (value: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport function MyPosts(props: MyPostsPropsType) {\r\n\r\n    const postsElement = props.posts.map(p => <Post key={p.id} message={p.message}\r\n                                                    likesCount={p.likesCount}/>)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPressEnterAddPost = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            props.addPost()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <div>\r\n                <textarea placeholder='Write your post message'\r\n                          value={props.newPostText}\r\n                          onChange={onChangeHandler}\r\n                          onKeyPress={onPressEnterAddPost}\r\n                />\r\n                <div>\r\n                    <button onClick={onClickAddPost}>Add post</button>\r\n                    <button>Remove</button>\r\n                </div>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport preloader from '../../../img/preloader.svg'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppStateType} from '../../../redux/reduxStore'\r\nimport {connect} from 'react-redux'\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    let RedirectComponent: React.FC<MapStatePropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        return isAuth ? <WrappedComponent {...restProps as WCP}/> : <Redirect to={'/login'}/>\r\n    }\r\n    return connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\r\n}","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../redux/reduxStore'\r\nimport {getProfile, ProfileType, setUserPage} from '../../redux/profileReducer'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {Preloader} from '../common/Preloader/Preloader'\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirect} from '../common/hoc/WithAuthRedirect'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) userId = '7253'\r\n        this.props.getProfile(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            !this.props.profile\r\n                ? <Preloader/>\r\n                : <div>\r\n                    <ProfileInfo profile={this.props.profile}/>\r\n                    <MyPostsContainer/>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: null | ProfileType\r\n}\r\ntype MapDispatchType = {\r\n    setUserPage: (profile: ProfileType) => void\r\n    getProfile: (userId: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile\r\n})\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchType, {}, AppStateType>(mapStateToProps, {setUserPage, getProfile}),\r\n    withRouter,\r\n    withAuthRedirect)\r\n(ProfileContainer) as React.ComponentType\r\n","import React from 'react'\r\nimport logo from '../../img/planet.png'\r\nimport style from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    id: null | number\r\n    login: null | string\r\n    email: null | string\r\n}\r\n\r\nexport function Header(props: HeaderPropsType) {\r\n    return (\r\n        <header className={style.header}>\r\n            <img src={logo} alt='logoImage'/>\r\n            <div className={style.loginBlock}>\r\n                {\r\n                    props.isAuth\r\n                        ? props.login\r\n                        : <NavLink to='/login'>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Header} from './Header'\r\nimport {AppStateType} from '../../redux/reduxStore'\r\nimport {getAuthUserData} from '../../redux/authReducer'\r\n\r\n\r\ntype HeaderContainerPropsType = MapStatePropsType & MapDispatchType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    id: null | number\r\n    login: null | string\r\n    email: null | string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchType = {\r\n    getAuthUserData: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    id: state.auth.id,\r\n    login: state.auth.login,\r\n    email: state.auth.email,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\r\n(mapStateToProps, {getAuthUserData})(HeaderContainer)","import React from 'react'\r\nimport {UserType} from '../../redux/usersReducer'\r\nimport style from './Users.module.css'\r\nimport {Preloader} from '../common/Preloader/Preloader'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    onPageChanged: (page: number) => void\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n    toggleIsFollowing: (userId: number, isFetching: boolean) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    const pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n    let pages: number[] = []\r\n    for (let i = 1; i <= 15; i++) { //вместо pagesCount будет 15, чтобы не показывать все страницы\r\n        pages.push(i)\r\n    }\r\n    const users = props.users.map((u) => {\r\n        return (\r\n            <div key={u.id}>\r\n                <div>\r\n                    <NavLink to={`profile/${u.id}`}>\r\n                        <img className={style.userPhoto} width='200px' alt='userPhoto' src={u.photos.small\r\n                            ? u.photos.small\r\n                            : 'https://i.pinimg.com/originals/8e/b0/fd/8eb0fdac7230089db2fa51f53e53397e.jpg'}/>\r\n                    </NavLink>\r\n                </div>\r\n                {\r\n                    u.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {\r\n                                      props.unfollow(u.id)\r\n                                  }}>Unfollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {\r\n                                      props.follow(u.id)\r\n                                  }}>Follow</button>\r\n                }\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n                <div>u.location.city</div>\r\n                <div>u.location.country</div>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map((p) => {\r\n                        return (\r\n                            <span\r\n                                className={`${style.pages} ${props.currentPage === p ? style.currentPage : ''}`}\r\n                                onClick={() => props.onPageChanged(p)} key={p}>\r\n                    {p}\r\n                    </span>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                props.isFetching\r\n                    ? <Preloader/>\r\n                    : <div> {users} </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Users} from './Users'\r\nimport {AppStateType} from '../../redux/reduxStore'\r\nimport {follow, getUsers, setCurrentPage, toggleIsFollowing, unfollow, UserType} from '../../redux/usersReducer'\r\n\r\ntype UsersContainerPropsType = MapStatePropsType & MapDispatchType\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType, {}> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.pageSize, this.props.currentPage)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.setCurrentPage(page)\r\n        this.props.getUsers(this.props.pageSize, page)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Users\r\n                users={this.props.users}\r\n                totalCount={this.props.totalCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                onPageChanged={this.onPageChanged}\r\n                isFetching={this.props.isFetching}\r\n                followingInProgress={this.props.followingInProgress}\r\n                toggleIsFollowing={this.props.toggleIsFollowing}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\ntype MapDispatchType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleIsFollowing: (userId: number, isFetching: boolean) => void\r\n    getUsers: (pageSize: number, currentPage: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    users: state.usersPage.users,\r\n    totalCount: state.usersPage.totalCount,\r\n    pageSize: state.usersPage.pageSize,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching,\r\n    followingInProgress: state.usersPage.followingInProgress\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\r\n(mapStateToProps, {follow, unfollow, setCurrentPage, toggleIsFollowing, getUsers})(UsersContainer)","import React from 'react'\r\nimport style from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport style from './Message.module.css'\r\nimport {AuthorMessageType} from '../DialogsContainer'\r\n\r\ntype MessageType = {\r\n    id: string\r\n    message: string\r\n    author: AuthorMessageType\r\n}\r\n\r\nexport function Message(props: MessageType) {\r\n    return (\r\n        <div className={style.wrapperMessage}>\r\n            <img src={props.author.src} className={style.avatar} alt='authorImage'/>\r\n            <div className={style.message}>\r\n                <div className={style.author}>{props.author.name}</div>\r\n                <div>\r\n                    <span className={style.messageText}>{props.message}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {addMessage, updateNewMessageText} from '../../redux/dialogsReducer'\r\nimport {Dialogs} from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../redux/reduxStore'\r\nimport {withAuthRedirect} from '../common/hoc/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport React from 'react'\r\n\r\nexport type AuthorMessageType = {\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    author: AuthorMessageType\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\ntype MapDispatchType = {\r\n    updateNewMessageText: (value: string) => void\r\n    addMessage: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    newMessageText: state.dialogsPage.newMessageText\r\n})\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchType, {}, AppStateType>(mapStateToProps, {updateNewMessageText, addMessage}),\r\n    withAuthRedirect)\r\n(Dialogs) as React.ComponentType\r\n","import React, {ChangeEvent} from 'react'\r\nimport style from './Dialogs.module.css'\r\nimport {DialogType, MessageType} from './DialogsContainer'\r\nimport {DialogItem} from './DialogItem/DialogItem'\r\nimport {Message} from './Message/Message'\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n    updateNewMessageText: (value: string) => void\r\n    addMessage: () => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n\r\n    const dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const messagesElements = props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}\r\n                                                              author={m.author}/>)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewMessageText(e.currentTarget.value)\r\n    }\r\n\r\n    const onSendMessageClick = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    const onPressEnterSendMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            props.addMessage()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={style.sendingMessage}>\r\n                    <textarea placeholder='Write your message'\r\n                              value={props.newMessageText}\r\n                              onChange={onChangeHandler}\r\n                              onKeyDown={onPressEnterSendMessage}\r\n                    />\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport function Login() {\r\n    return <h1>Login</h1>\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport {Route} from 'react-router-dom'\r\nimport {Navbar} from './components/Navbar/Navbar'\r\nimport ProfileContainer from './components/Profile/ProfileContainer'\r\nimport HeaderContainer from './components/Header/HeaderContainer'\r\nimport UsersContainer from './components/Users/UsersContainer'\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\r\nimport {Login} from './components/Login/Login'\r\n\r\n\r\nexport function App() {\r\n    return (\r\n        <div className='app-wrapper'>\r\n            <HeaderContainer/>\r\n            <Navbar/>\r\n            <div className='app-wrapper-content'>\r\n                <Route path='/profile/:userId?'\r\n                       render={() => <ProfileContainer/>}/>\r\n                <Route path='/dialogs'\r\n                       render={() => <DialogsContainer/>}/>\r\n                <Route path='/users'\r\n                       render={() => <UsersContainer/>}/>\r\n                <Route path='/login'\r\n                       render={() => <Login/>}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './index.css'\r\nimport {store} from './redux/reduxStore'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {App} from './App'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux'\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}