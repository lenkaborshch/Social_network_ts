{"version":3,"sources":["components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Users/Users.module.css","components/Dialogs/DialogItem/DialogItem.module.css","img/cover.jpg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","img/penguin.png","img/planet.png","components/Header/Header.module.css","components/Navbar/Navbar.module.css","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/usersReducer.ts","redux/reduxStore.ts","serviceWorker.ts","components/Navbar/Sidebar/SidebarContainer.tsx","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Header/Header.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","posts","id","v1","message","likesCount","newPostText","dialogs","name","messages","author","src","newMessageText","friends","users","totalCount","pageSize","currentPage","rootReducer","combineReducers","profilePage","state","action","type","newPost","newText","dialogsPage","newMessage","sidebar","usersPage","map","u","userId","followed","store","createStore","Boolean","window","location","hostname","match","SidebarContainer","connect","props","sidebarFriends","f","className","style","sidebarFriend","key","alt","friendName","sidebarWrapper","Navbar","item","to","activeClassName","active","ProfileInfo","cover","Post","post_image","MyPostsContainer","dispatch","updateNewPostText","value","addPost","postsElement","p","placeholder","onChange","e","currentTarget","onKeyPress","preventDefault","onClick","Profile","Header","header","logo","Users","Math","ceil","pages","i","push","onPageChanged","width","photos","small","unfollow","follow","status","UsersContainer","page","setCurrentPage","axios","get","then","response","setUsers","data","items","this","setTotalCount","React","Component","followAC","unfollowAC","setUsersAC","setTotalCountAC","setCurrentPageAC","DialogItem","dialog","Message","wrapperMessage","avatar","messageText","DialogsContainer","updateNewMessageText","addMessage","dialogsElements","d","messagesElements","m","dialogsItems","sendingMessage","onKeyDown","App","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6671d067.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"Message_wrapperMessage__2PR9y\",\"message\":\"Message_message__1xARY\",\"avatar\":\"Message_avatar__2YUgg\",\"author\":\"Message_author__27nww\",\"messageText\":\"Message_messageText__35SWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3r3JM\",\"dialogsItems\":\"Dialogs_dialogsItems__3TVHB\",\"messages\":\"Dialogs_messages__IgtER\",\"dialog\":\"Dialogs_dialog__1igoW\",\"active\":\"Dialogs_active__1GCOK\",\"sendingMessage\":\"Dialogs_sendingMessage__ZrzXj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__2ASsN\",\"sidebarFriend\":\"Sidebar_sidebarFriend__UFX9C\",\"friendName\":\"Sidebar_friendName__6VNDb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Users_currentPage__1vt-F\",\"pages\":\"Users_pages__1BN_F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__Bw4WD\",\"active\":\"DialogItem_active__3BwCn\"};","module.exports = __webpack_public_path__ + \"static/media/cover.258dc82d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileInfo_cover__1xOCn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2muiw\"};","module.exports = __webpack_public_path__ + \"static/media/penguin.20594e02.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.1ab0b265.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1EQNb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__qDSm_\",\"item\":\"Navbar_item__Ol8Vw\",\"active\":\"Navbar_active__1ovz8\"};","import {ActionsTypes} from './reduxStore'\r\nimport {v1} from 'uuid'\r\n\r\nconst ADD_POST = 'ADD_POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hey', likesCount: '20'},\r\n        {id: v1(), message: 'How are you?', likesCount: '2'}\r\n    ],\r\n    newPostText: ''\r\n}\r\n\r\nexport type ProfilePageType = typeof initialState\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: '0'\r\n            }\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [newPost, ...state.posts]\r\n            }\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPostAC = (): AddPostActionType => ({type: ADD_POST})\r\n\r\nexport const updateNewPostTextAC = (newText: string): UpdateNewPostTextActionType => ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText\r\n})\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST\r\n}\r\n\r\ntype UpdateNewPostTextActionType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n}","import {v1} from 'uuid'\r\nimport {ActionsTypes} from './reduxStore'\r\n\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Vadim'},\r\n        {id: v1(), name: 'Mama'},\r\n        {id: v1(), name: 'Papa'},\r\n        {id: v1(), name: 'Yurii'},\r\n        {id: v1(), name: 'Nik'},\r\n    ],\r\n    messages: [\r\n        {\r\n            id: v1(),\r\n            message: 'Hey',\r\n            author: {\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            }\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: 'How are you?',\r\n            author: {\r\n                name: 'Me',\r\n                src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n            }\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: 'Good luck',\r\n            author: {\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            }\r\n        },\r\n    ],\r\n    newMessageText: ''\r\n}\r\n\r\nexport type DialogsPageType = typeof initialState\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let newMessage = {\r\n                id: v1(),\r\n                message: state.newMessageText,\r\n                author: {\r\n                    name: 'Me',\r\n                    src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        }\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newMessageText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessageAC = (): AddMessageActionType => ({type: SEND_MESSAGE})\r\n\r\nexport const updateNewMessageTextAC = (newMessageText: string): UpdateNewMessageTextActionType => ({\r\n    type: UPDATE_NEW_MESSAGE_TEXT,\r\n    newMessageText\r\n})\r\n\r\ntype AddMessageActionType = {\r\n    type: typeof SEND_MESSAGE\r\n}\r\n\r\ntype UpdateNewMessageTextActionType = {\r\n    type: typeof UPDATE_NEW_MESSAGE_TEXT\r\n    newMessageText: string\r\n}","import {ActionsTypes} from './reduxStore'\r\nimport {v1} from 'uuid'\r\n\r\nexport type FriendType = {\r\n    id: string\r\n    name: string\r\n    src: string\r\n}\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {\r\n            id: v1(),\r\n            name: 'Vadim',\r\n            src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Busya',\r\n            src: 'https://i.pinimg.com/originals/1c/ba/1e/1cba1e5e40356f6edb0235c8a09a07d5.jpg'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Freud',\r\n            src: 'https://pbs.twimg.com/profile_images/1173161429266030592/lJCNA_JC_400x400.jpg'\r\n        }\r\n    ]\r\n}\r\n\r\nexport type SidebarType = typeof initialState\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes): SidebarType => {\r\n    return state\r\n}","import {ActionsTypes} from './reduxStore'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    totalCount: 0,\r\n    pageSize: 5,\r\n    currentPage: 1\r\n}\r\n\r\nexport type UsersPageType = typeof initialState\r\n\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const followAC = (userId: number): FollowActionType => ({type: FOLLOW, userId})\r\nexport const unfollowAC = (userId: number): UnollowActionType => ({type: UNFOLLOW, userId})\r\nexport const setUsersAC = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users})\r\nexport const setTotalCountAC = (totalCount: number): setTotalCountActionType => ({type: SET_TOTAL_COUNT, totalCount})\r\nexport const setCurrentPageAC = (currentPage: number): setCurrentPageActionType => ({type: SET_CURRENT_PAGE, currentPage})\r\n\r\ntype FollowActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\n\r\ntype UnollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\n\r\ntype setTotalCountActionType = {\r\n    type: typeof SET_TOTAL_COUNT\r\n    totalCount: number\r\n}\r\n\r\ntype setCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}","import {combineReducers, createStore} from 'redux'\r\nimport {addPostAC, profileReducer, updateNewPostTextAC} from './profileReducer'\r\nimport {addMessageAC, dialogsReducer, updateNewMessageTextAC} from './dialogsReducer'\r\nimport {sidebarReducer} from './sidebarReducer'\r\nimport {followAC, setCurrentPageAC, setTotalCountAC, setUsersAC, unfollowAC, usersReducer} from './usersReducer'\r\nimport {useDispatch as _useDispatch} from 'react-redux'\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof addMessageAC>\r\n    | ReturnType<typeof updateNewMessageTextAC>\r\n    | ReturnType<typeof followAC>\r\n    | ReturnType<typeof unfollowAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setTotalCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer // это типизация самой функции === (state: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n\r\n// for DialogsWithHooks\r\ninterface IRootState extends AppStateType {\r\n} // нужно называть именно IRootState!!!\r\n\r\nexport const selectDialogsPage = (state: IRootState) => state.dialogsPage // вместо mapStateToProps\r\nexport function useDispatch() { // вместо mapDispatchToProps\r\n    const dispatch = _useDispatch()\r\n    return (ac: ActionsTypes) => dispatch(ac)\r\n}\r\n\r\n// благодаря useSelector и useDispatch можно не использовать connect","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {Sidebar} from './Sidebar'\r\nimport {AppStateType} from '../../../redux/reduxStore'\r\nimport {connect} from 'react-redux'\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    friends: state.sidebar.friends\r\n})\r\n\r\nexport const SidebarContainer = connect(mapStateToProps)(Sidebar)","import React from 'react'\r\nimport style from './Sidebar.module.css'\r\nimport {FriendType} from '../../../redux/sidebarReducer'\r\n\r\ntype SidebarPropsType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nexport function Sidebar(props: SidebarPropsType) {\r\n    let sidebarFriends = props.friends.map(f => {\r\n        return (\r\n            <div className={style.sidebarFriend} key={f.id}>\r\n                <img src={f.src} alt='friendsPhoto'/>\r\n                <p className={style.friendName}>{f.name} </p>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className={style.sidebarWrapper}>\r\n            <h3>Friends</h3>\r\n            {sidebarFriends}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport style from './Navbar.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {SidebarContainer} from './Sidebar/SidebarContainer'\r\n\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div className={style.item}>\r\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/dialogs' activeClassName={style.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/news' activeClassName={style.active}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/music' activeClassName={style.active}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/settings' activeClassName={style.active}>Settings</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/users' activeClassName={style.active}>Users</NavLink>\r\n            </div>\r\n            <div>\r\n                <SidebarContainer/>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import cover from '../../../img/cover.jpg'\r\nimport React from 'react'\r\nimport style from './ProfileInfo.module.css'\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={style.cover} src={cover} alt='coverImage'/>\r\n            </div>\r\n            <div>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport style from './Post.module.css'\r\nimport post_image from './../../../../img/penguin.png'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={post_image} alt='postImage'/>\r\n            {props.message}\r\n            <div>\r\n                {props.likesCount} <span>❤</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import {addPostAC, PostType, updateNewPostTextAC} from '../../../redux/profileReducer'\r\nimport {MyPosts} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {ActionsTypes, AppStateType} from '../../../redux/reduxStore'\r\n\r\n\r\ntype MapStatePropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchType = {\r\n    updateNewPostText: (value: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    newPostText: state.profilePage.newPostText,\r\n    posts: state.profilePage.posts\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void): MapDispatchType => ({\r\n    updateNewPostText(value: string) {\r\n        dispatch(updateNewPostTextAC(value))\r\n    },\r\n    addPost() {\r\n        dispatch(addPostAC())\r\n    }\r\n})\r\n\r\nexport const MyPostsContainer = connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\r\n(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react'\r\nimport style from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport {PostType} from '../../../redux/profileReducer'\r\n\r\ntype MyPostsPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    updateNewPostText: (value: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport function MyPosts(props: MyPostsPropsType) {\r\n\r\n    const postsElement = props.posts.map(p => <Post key={p.id} message={p.message}\r\n                                                    likesCount={p.likesCount}/>)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPressEnterAddPost = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            props.addPost()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <div>\r\n                <textarea placeholder='Write your post message'\r\n                          value={props.newPostText}\r\n                          onChange={onChangeHandler}\r\n                          onKeyPress={onPressEnterAddPost}\r\n                />\r\n                <div>\r\n                    <button onClick={onClickAddPost}>Add post</button>\r\n                    <button>Remove</button>\r\n                </div>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer'\r\n\r\ntype ProfilePropsType = {}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport logo from '../../img/planet.png'\r\nimport style from './Header.module.css'\r\n\r\nexport function Header() {\r\n    return (\r\n        <header className={style.header}>\r\n            <img src={logo} alt='logoImage'/>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\nimport {UserType} from '../../redux/usersReducer'\r\nimport style from './Users.module.css'\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    const pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n    let pages: number[] = []\r\n    for (let i = 1; i <= 15; i++) { //вместо pagesCount будет 15, чтобы не показывать все страницы\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map((p) => {\r\n                        return (\r\n                            <span\r\n                                className={`${style.pages} ${props.currentPage === p ? style.currentPage : ''}`}\r\n                                onClick={() => props.onPageChanged(p)} key={p}>\r\n                                {p}\r\n                            </span>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map((u) => {\r\n                    return (\r\n                        <div key={u.id}>\r\n                            <div>\r\n                                <img width='200px' alt='userPhoto' src={u.photos.small\r\n                                    ? u.photos.small\r\n                                    : 'https://i.pinimg.com/originals/8e/b0/fd/8eb0fdac7230089db2fa51f53e53397e.jpg'}/>\r\n                            </div>\r\n                            {u.followed\r\n                                ? <button onClick={() => props.unfollow(u.id)}>Unfollow</button>\r\n                                : <button onClick={() => props.follow(u.id)}>Follow</button>}\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                            <div>u.location.city</div>\r\n                            <div>u.location.country</div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Users} from './Users'\r\nimport {ActionsTypes, AppStateType} from '../../redux/reduxStore'\r\nimport {followAC, setCurrentPageAC, setTotalCountAC, setUsersAC, unfollowAC, UserType} from '../../redux/usersReducer'\r\nimport * as axios from 'axios'\r\n\r\ntype UsersContainerPropsType = {\r\n    users: Array<UserType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setTotalCount: (totalCount: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType, {}> {\r\n    componentDidMount() {\r\n        axios.default.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.currentPage}`)\r\n            .then((response) => {\r\n                this.props.setUsers(response.data.items)\r\n                this.props.setTotalCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.setCurrentPage(page)\r\n        axios.default.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${page}`)\r\n            .then((response) => {\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <Users\r\n            users={this.props.users}\r\n            totalCount={this.props.totalCount}\r\n            pageSize={this.props.pageSize}\r\n            currentPage={this.props.currentPage}\r\n            follow={this.props.follow}\r\n            unfollow={this.props.unfollow}\r\n            onPageChanged={this.onPageChanged}/>\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n}\r\ntype MapDispatchType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setTotalCount: (totalCount: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    users: state.usersPage.users,\r\n    totalCount: state.usersPage.totalCount,\r\n    pageSize: state.usersPage.pageSize,\r\n    currentPage: state.usersPage.currentPage,\r\n})\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void): MapDispatchType => ({\r\n    follow: (userId: number) => {\r\n        dispatch(followAC(userId))\r\n    },\r\n    unfollow: (userId: number) => {\r\n        dispatch(unfollowAC(userId))\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n        dispatch(setUsersAC(users))\r\n    },\r\n    setTotalCount: (totalCount: number) => {\r\n        dispatch(setTotalCountAC(totalCount))\r\n    },\r\n    setCurrentPage: (currentPage: number) => {\r\n        dispatch(setCurrentPageAC(currentPage))\r\n    },\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(UsersContainer)","import React from 'react'\r\nimport style from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport style from './Message.module.css'\r\nimport {AuthorMessageType} from '../DialogsContainer'\r\n\r\ntype MessageType = {\r\n    id: string\r\n    message: string\r\n    author: AuthorMessageType\r\n}\r\n\r\nexport function Message(props: MessageType) {\r\n    return (\r\n        <div className={style.wrapperMessage}>\r\n            <img src={props.author.src} className={style.avatar} alt='authorImage'/>\r\n            <div className={style.message}>\r\n                <div className={style.author}>{props.author.name}</div>\r\n                <div>\r\n                    <span className={style.messageText}>{props.message}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {addMessageAC, updateNewMessageTextAC} from '../../redux/dialogsReducer'\r\nimport {Dialogs} from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {ActionsTypes, AppStateType} from '../../redux/reduxStore'\r\n\r\nexport type AuthorMessageType = {\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    author: AuthorMessageType\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\ntype MapDispatchType = {\r\n    updateNewMessageText: (value: string) => void\r\n    addMessage: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    newMessageText: state.dialogsPage.newMessageText\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void): MapDispatchType => ({\r\n    updateNewMessageText(value: string) {\r\n        dispatch(updateNewMessageTextAC(value))\r\n    },\r\n    addMessage() {\r\n        dispatch(addMessageAC())\r\n    }\r\n})\r\n\r\nexport const DialogsContainer = connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\r\n(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from 'react'\r\nimport style from './Dialogs.module.css'\r\nimport {DialogType, MessageType} from './DialogsContainer'\r\nimport {DialogItem} from './DialogItem/DialogItem'\r\nimport {Message} from './Message/Message'\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n    updateNewMessageText: (value: string) => void\r\n    addMessage: () => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n\r\n    const dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const messagesElements = props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}\r\n                                                              author={m.author}/>)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewMessageText(e.currentTarget.value)\r\n    }\r\n\r\n    const onSendMessageClick = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    const onPressEnterSendMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            props.addMessage()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={style.sendingMessage}>\r\n                    <textarea placeholder='Write your message'\r\n                              value={props.newMessageText}\r\n                              onChange={onChangeHandler}\r\n                              onKeyDown={onPressEnterSendMessage}\r\n                    />\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport {Route} from 'react-router-dom'\r\nimport {Navbar} from './components/Navbar/Navbar'\r\nimport {Profile} from './components/Profile/Profile'\r\nimport {Header} from './components/Header/Header'\r\nimport UsersContainer from './components/Users/UsersContainer'\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer'\r\n\r\n\r\nexport function App() {\r\n    return (\r\n        <div className='app-wrapper'>\r\n            <Header/>\r\n            <Navbar/>\r\n            <div className='app-wrapper-content'>\r\n                <Route path='/profile'\r\n                       render={() => <Profile/>}\r\n                />\r\n                <Route path='/dialogs'\r\n                       render={() => <DialogsContainer/>}\r\n                />\r\n                <Route path='/users'\r\n                       render={() => <UsersContainer/>}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './index.css'\r\nimport {store} from './redux/reduxStore'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {App} from './App'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}