{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Dialogs/DialogItem/DialogItem.module.css","img/planet.png","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","img/penguin.png","img/cover.jpg","components/Profile/ProfileInfo/ProfileInfo.module.css","redux/state.ts","serviceWorker.ts","components/Header/Header.tsx","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx"],"names":["module","exports","state","profilePage","posts","id","v1","message","likesCount","newPostText","dialogsPage","dialogs","name","messages","author","src","newMessageText","sidebar","friends","rerenderEntireThree","console","log","addPost","newPost","push","updateNewPostText","newText","addMessage","newMessage","updateNewMessageText","Boolean","window","location","hostname","match","Header","className","style","header","logo","alt","Sidebar","props","sidebarFriends","map","f","sidebarFriend","key","friendName","sidebarWrapper","Navbar","item","to","activeClassName","active","Post","post_image","MyPosts","postsElement","p","placeholder","value","onChange","e","currentTarget","onClick","ProfileInfo","cover","Profile","DialogItem","dialog","Message","wrapperMessage","avatar","messageText","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","sendingMessage","App","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7850b7ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3IGaR\",\"item\":\"Navbar_item__h95WS\",\"active\":\"Navbar_active__1PjXT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"Message_wrapperMessage__2vPAI\",\"message\":\"Message_message__1yLU-\",\"avatar\":\"Message_avatar__3rc1s\",\"author\":\"Message_author__iUgK8\",\"messageText\":\"Message_messageText__18eup\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2GIgq\",\"dialogsItems\":\"Dialogs_dialogsItems__U9Eac\",\"messages\":\"Dialogs_messages__2Eq2K\",\"dialog\":\"Dialogs_dialog__s_4VI\",\"active\":\"Dialogs_active__2mBfT\",\"sendingMessage\":\"Dialogs_sendingMessage__qt9Rj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__pTjk7\",\"sidebarFriend\":\"Sidebar_sidebarFriend__--or2\",\"friendName\":\"Sidebar_friendName__1Z1q2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3tYG5\",\"active\":\"DialogItem_active__1CKxp\"};","module.exports = __webpack_public_path__ + \"static/media/planet.1ab0b265.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2mPf9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1qEXI\"};","module.exports = __webpack_public_path__ + \"static/media/penguin.20594e02.png\";","module.exports = __webpack_public_path__ + \"static/media/cover.258dc82d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileInfo_cover__32cUv\"};","import {v1} from 'uuid';\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type AuthorMessage = {\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    author: AuthorMessage\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nexport type FriendType = {\r\n    id: string\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: SidebarType\r\n}\r\n\r\nlet state: RootStateType = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: v1(), message: 'Hey', likesCount: '20'},\r\n            {id: v1(), message: 'How are you?', likesCount: '2'}\r\n        ],\r\n        newPostText: ''\r\n    },\r\n    dialogsPage: {\r\n        dialogs: [\r\n            {id: v1(), name: 'Vadim'},\r\n            {id: v1(), name: 'Mama'},\r\n            {id: v1(), name: 'Papa'},\r\n            {id: v1(), name: 'Yurii'},\r\n            {id: v1(), name: 'Nik'},\r\n        ],\r\n        messages: [\r\n            {\r\n                id: v1(),\r\n                message: 'Hey',\r\n                author: {\r\n                    name: 'Vadim',\r\n                    src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n                }\r\n            },\r\n            {\r\n                id: v1(),\r\n                message: 'How are you?',\r\n                author: {\r\n                    name: 'Me',\r\n                    src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n                }\r\n            },\r\n            {\r\n                id: v1(),\r\n                message: 'Good luck',\r\n                author: {\r\n                    name: 'Vadim',\r\n                    src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n                }\r\n            },\r\n        ],\r\n        newMessageText: ''\r\n    },\r\n    sidebar: {\r\n        friends: [\r\n            {\r\n                id: v1(),\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            },\r\n            {\r\n                id: v1(),\r\n                name: 'Busya',\r\n                src: 'https://i.pinimg.com/originals/1c/ba/1e/1cba1e5e40356f6edb0235c8a09a07d5.jpg'\r\n            },\r\n            {\r\n                id: v1(),\r\n                name: 'Freud',\r\n                src: 'https://pbs.twimg.com/profile_images/1173161429266030592/lJCNA_JC_400x400.jpg'\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nlet rerenderEntireThree = (state: RootStateType) => {\r\n    console.log('State changed')\r\n}\r\n\r\nexport const subscribe = (observer: (state: RootStateType) => void) => {\r\n    rerenderEntireThree = observer\r\n}\r\n\r\nexport const addPost = () => {\r\n    let newPost: PostType = {\r\n        id: v1(),\r\n        message: state.profilePage.newPostText,\r\n        likesCount: '0'\r\n    }\r\n    state.profilePage.posts.push(newPost)\r\n    state.profilePage.newPostText = ''\r\n    rerenderEntireThree(state)\r\n}\r\n\r\nexport const updateNewPostText = (newText: string) => {\r\n    state.profilePage.newPostText = newText\r\n    rerenderEntireThree(state)\r\n}\r\n\r\nexport const addMessage = () => {\r\n    let newMessage = {\r\n        id: v1(),\r\n        message: state.dialogsPage.newMessageText,\r\n        author: {\r\n            name: 'Vadim',\r\n            src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n        }\r\n    }\r\n    state.dialogsPage.messages.push(newMessage);\r\n    state.dialogsPage.newMessageText = ''\r\n    rerenderEntireThree(state)\r\n}\r\n\r\nexport const updateNewMessageText = (newMessageText: string) => {\r\n    state.dialogsPage.newMessageText = newMessageText\r\n    rerenderEntireThree(state)\r\n}\r\n\r\n\r\n\r\nexport default state","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport logo from '../../img/planet.png';\r\nimport style from './Header.module.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className={style.header}>\r\n            <img src={logo} alt='logoImage'/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport style from './Sidebar.module.css';\r\nimport {SidebarType} from '../../../redux/state';\r\n\r\ntype SidebarPropsType = {\r\n    state: SidebarType\r\n}\r\n\r\nfunction Sidebar(props: SidebarPropsType) {\r\n    let sidebarFriends = props.state.friends.map(f => {\r\n        return (\r\n            <div className={style.sidebarFriend} key={f.id}>\r\n                <img src={f.src} alt='friendsPhoto'/>\r\n                <p className={style.friendName}>{f.name} </p>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className={style.sidebarWrapper}>\r\n            <h3>Friends</h3>\r\n            {sidebarFriends}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport style from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Sidebar from './Sidebar/Sidebar';\r\nimport {SidebarType} from '../../redux/state';\r\n\r\ntype NavbarPropsType = {\r\n    state: SidebarType\r\n}\r\n\r\nfunction Navbar(props: NavbarPropsType) {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div className={style.item}>\r\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/dialogs' activeClassName={style.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/news' activeClassName={style.active}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/music' activeClassName={style.active}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/settings' activeClassName={style.active}>Settings</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/users' activeClassName={style.active}>Users</NavLink>\r\n            </div>\r\n            <div>\r\n                <Sidebar state={props.state}/>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport post_image from './../../../../img/penguin.png';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={post_image} alt='postImage'/>\r\n            {props.message}\r\n            <div>\r\n                {props.likesCount} <span>❤</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {ProfilePageType} from '../../../redux/state';\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: () => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n\r\n    const postsElement = props.profilePage.posts.map(p => <Post key={p.id} message={p.message}\r\n                                                                likesCount={p.likesCount}/>);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value);\r\n    }\r\n    const addPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <div>\r\n                <textarea placeholder='Write your post message'\r\n                          value={props.profilePage.newPostText}\r\n                          onChange={onChangeHandler}\r\n                />\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                    <button>Remove</button>\r\n                </div>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import cover from '../../../img/cover.jpg';\r\nimport React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={style.cover} src={cover} alt='coverImage'/>\r\n            </div>\r\n            <div>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ProfilePageType} from '../../redux/state';\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: () => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts profilePage={props.profilePage}\r\n                     addPost={props.addPost}\r\n                     updateNewPostText={props.updateNewPostText}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport style from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nfunction DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport style from './Message.module.css';\r\nimport {AuthorMessage} from '../../../redux/state';\r\n\r\ntype MessageType = {\r\n    message: string\r\n    author: AuthorMessage\r\n}\r\n\r\nfunction Message(props: MessageType) {\r\n    return (\r\n        <div className={style.wrapperMessage}>\r\n            <img src={props.author.src} className={style.avatar} alt='authorImage'/>\r\n            <div className={style.message}>\r\n                <div className={style.author}>{props.author.name}</div>\r\n                <div>\r\n                    <span className={style.messageText}>{props.message}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent, useState} from 'react'\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {DialogsPageType} from '../../redux/state'\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addMessage: () => void\r\n    updateNewMessageText: (newMessageText: string) => void\r\n}\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}\r\n                                                                          author={m.author}/>)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewMessageText(e.currentTarget.value)\r\n    }\r\n\r\n    const sentMessage = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messagesElements}\r\n                <div className={style.sendingMessage}>\r\n                    <textarea placeholder='Write your message'\r\n                              value={props.dialogsPage.newMessageText}\r\n                              onChange={onChangeHandler}\r\n                    />\r\n                    <button onClick={sentMessage}>Sent</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from 'react'\nimport './App.css'\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport Profile from './components/Profile/Profile'\nimport Dialogs from './components/Dialogs/Dialogs'\nimport {RootStateType} from './redux/state'\nimport {Route} from 'react-router-dom'\n\ntype AppPropsType = {\n    state: RootStateType\n    addPost: () => void\n    updateNewPostText: (newText: string) => void\n    addMessage: () => void\n    updateNewMessageText: (newMessageText: string) => void\n}\n\nfunction App(props: AppPropsType) {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar state={props.state.sidebar}/>\n            <div className='app-wrapper-content'>\n                <Route path='/profile'\n                       render={() => <Profile profilePage={props.state.profilePage}\n                                              addPost={props.addPost}\n                                              updateNewPostText={props.updateNewPostText}/>}\n                />\n                <Route path='/dialogs'\n                       render={() => <Dialogs dialogsPage={props.state.dialogsPage}\n                                              addMessage={props.addMessage}\n                                              updateNewMessageText={props.updateNewMessageText}/>}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App\n","import './index.css'\nimport state, {subscribe} from './redux/state'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport {addPost, RootStateType, updateNewMessageText, updateNewPostText, addMessage} from './redux/state'\nimport {BrowserRouter} from 'react-router-dom'\n\n\nexport let rerenderEntireThree = (state: RootStateType) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App state={state} addPost={addPost} updateNewPostText={updateNewPostText}\n                 addMessage={addMessage} updateNewMessageText={updateNewMessageText}/>\n        </BrowserRouter>,\n        document.getElementById('root'))\n}\nrerenderEntireThree(state)\nsubscribe(rerenderEntireThree)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}