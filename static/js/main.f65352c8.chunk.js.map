{"version":3,"sources":["components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Dialogs/DialogItem/DialogItem.module.css","img/cover.jpg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","img/penguin.png","img/planet.png","components/Header/Header.module.css","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/usersReducer.ts","redux/reduxStore.ts","serviceWorker.ts","components/Navbar/Sidebar/SidebarContainer.tsx","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Header/Header.tsx","components/Users/UsersContainer.tsx","components/Users/Users.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx","components/Navbar/Navbar.module.css"],"names":["module","exports","initialState","posts","id","v1","message","likesCount","newPostText","dialogs","name","messages","author","src","newMessageText","friends","users","rootReducer","combineReducers","profilePage","state","action","type","newPost","newText","dialogsPage","newMessage","sidebar","usersPage","map","u","userId","followed","store","createStore","Boolean","window","location","hostname","match","SidebarContainer","connect","props","sidebarFriends","f","className","style","sidebarFriend","key","alt","friendName","sidebarWrapper","Navbar","item","to","activeClassName","active","ProfileInfo","cover","Post","post_image","MyPostsContainer","dispatch","updateNewPostText","value","addPost","postsElement","p","placeholder","onChange","e","currentTarget","onKeyPress","preventDefault","onClick","Profile","Header","header","logo","UsersContainer","follow","followAC","unfollow","unfollowAC","setUsers","setUsersAC","length","axios","get","then","response","data","items","width","photos","small","status","DialogItem","dialog","Message","wrapperMessage","avatar","messageText","DialogsContainer","updateNewMessageText","addMessage","dialogsElements","d","messagesElements","m","dialogsItems","sendingMessage","onKeyDown","App","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f65352c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"Message_wrapperMessage__24PeH\",\"message\":\"Message_message__1MOXo\",\"avatar\":\"Message_avatar__2zGiU\",\"author\":\"Message_author__Te61r\",\"messageText\":\"Message_messageText__1G9P6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"sendingMessage\":\"Dialogs_sendingMessage__2XR3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__1UkE2\",\"sidebarFriend\":\"Sidebar_sidebarFriend___R4bw\",\"friendName\":\"Sidebar_friendName__1T17j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3tDA2\",\"active\":\"DialogItem_active__2qnc5\"};","module.exports = __webpack_public_path__ + \"static/media/cover.258dc82d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileInfo_cover__301bp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","module.exports = __webpack_public_path__ + \"static/media/penguin.20594e02.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.1ab0b265.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","import {ActionsTypes} from './reduxStore'\nimport {v1} from 'uuid'\n\nconst ADD_POST = 'ADD_POST'\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\n\nconst initialState = {\n    posts: [\n        {id: v1(), message: 'Hey', likesCount: '20'},\n        {id: v1(), message: 'How are you?', likesCount: '2'}\n    ],\n    newPostText: ''\n}\n\nexport type ProfilePageType = typeof initialState\nexport type PostType = {\n    id: string\n    message: string\n    likesCount: string\n}\n\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost: PostType = {\n                id: v1(),\n                message: state.newPostText,\n                likesCount: '0'\n            }\n            return {\n                ...state,\n                newPostText: '',\n                posts: [newPost, ...state.posts]\n            }\n        }\n        case UPDATE_NEW_POST_TEXT: {\n            return {\n                ...state,\n                newPostText: action.newText\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const addPostAC = (): AddPostActionType => ({type: ADD_POST})\n\nexport const updateNewPostTextAC = (newText: string): UpdateNewPostTextActionType => ({\n    type: UPDATE_NEW_POST_TEXT,\n    newText\n})\n\ntype AddPostActionType = {\n    type: typeof ADD_POST\n}\n\ntype UpdateNewPostTextActionType = {\n    type: typeof UPDATE_NEW_POST_TEXT\n    newText: string\n}","import {v1} from 'uuid'\nimport {ActionsTypes} from './reduxStore'\n\nconst SEND_MESSAGE = 'SEND_MESSAGE'\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\n\nconst initialState = {\n    dialogs: [\n        {id: v1(), name: 'Vadim'},\n        {id: v1(), name: 'Mama'},\n        {id: v1(), name: 'Papa'},\n        {id: v1(), name: 'Yurii'},\n        {id: v1(), name: 'Nik'},\n    ],\n    messages: [\n        {\n            id: v1(),\n            message: 'Hey',\n            author: {\n                name: 'Vadim',\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\n            }\n        },\n        {\n            id: v1(),\n            message: 'How are you?',\n            author: {\n                name: 'Me',\n                src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\n            }\n        },\n        {\n            id: v1(),\n            message: 'Good luck',\n            author: {\n                name: 'Vadim',\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\n            }\n        },\n    ],\n    newMessageText: ''\n}\n\nexport type DialogsPageType = typeof initialState\n\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\n    switch (action.type) {\n        case SEND_MESSAGE: {\n            let newMessage = {\n                id: v1(),\n                message: state.newMessageText,\n                author: {\n                    name: 'Me',\n                    src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\n                }\n            }\n            return {\n                ...state,\n                newMessageText: '',\n                messages: [...state.messages, newMessage]\n            }\n        }\n        case UPDATE_NEW_MESSAGE_TEXT: {\n            return {\n                ...state,\n                newMessageText: action.newMessageText\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = (): AddMessageActionType => ({type: SEND_MESSAGE})\n\nexport const updateNewMessageTextAC = (newMessageText: string): UpdateNewMessageTextActionType => ({\n    type: UPDATE_NEW_MESSAGE_TEXT,\n    newMessageText\n})\n\ntype AddMessageActionType = {\n    type: typeof SEND_MESSAGE\n}\n\ntype UpdateNewMessageTextActionType = {\n    type: typeof UPDATE_NEW_MESSAGE_TEXT\n    newMessageText: string\n}","import {ActionsTypes} from './reduxStore'\nimport {v1} from 'uuid'\n\nexport type FriendType = {\n    id: string\n    name: string\n    src: string\n}\n\nconst initialState = {\n    friends: [\n        {\n            id: v1(),\n            name: 'Vadim',\n            src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\n        },\n        {\n            id: v1(),\n            name: 'Busya',\n            src: 'https://i.pinimg.com/originals/1c/ba/1e/1cba1e5e40356f6edb0235c8a09a07d5.jpg'\n        },\n        {\n            id: v1(),\n            name: 'Freud',\n            src: 'https://pbs.twimg.com/profile_images/1173161429266030592/lJCNA_JC_400x400.jpg'\n        }\n    ]\n}\n\nexport type SidebarType = typeof initialState\n\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes): SidebarType => {\n    return state\n}","import {ActionsTypes} from './reduxStore'\n\nconst FOLLOW = 'FOLLOW'\nconst UNFOLLOW = 'UNFOLLOW'\nconst SET_USERS = 'SET_USERS'\n\nconst initialState = {\n    users: [] as Array<UserType>\n}\nexport type UserType = {\n    name: string\n    id: number\n    uniqueUrlName: string | null\n    photos: {\n        small: string | null\n        large: string | null\n    }\n    status: string | null\n    followed: boolean\n}\n\nexport type UsersPageType = typeof initialState\n\n\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\n    switch (action.type) {\n        case FOLLOW: {\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        }\n        case UNFOLLOW: {\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n        }\n        case SET_USERS: {\n            return {...state, users: [...state.users, ...action.users]}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const followAC = (userId: number): FollowActionType => ({type: FOLLOW, userId})\nexport const unfollowAC = (userId: number): UnollowActionType => ({type: UNFOLLOW, userId})\nexport const setUsersAC = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users})\n\ntype FollowActionType = {\n    type: typeof FOLLOW\n    userId: number\n}\n\ntype UnollowActionType = {\n    type: typeof UNFOLLOW\n    userId: number\n}\n\ntype SetUsersActionType = {\n    type: typeof SET_USERS\n    users: Array<UserType>\n}","import {combineReducers, createStore} from 'redux'\nimport {addPostAC, profileReducer, updateNewPostTextAC} from './profileReducer'\nimport {addMessageAC, dialogsReducer, updateNewMessageTextAC} from './dialogsReducer'\nimport {sidebarReducer} from './sidebarReducer'\nimport {followAC, setUsersAC, unfollowAC, usersReducer} from './usersReducer'\nimport {useDispatch as _useDispatch} from 'react-redux'\n\nexport type ActionsTypes =\n    ReturnType<typeof addPostAC>\n    | ReturnType<typeof updateNewPostTextAC>\n    | ReturnType<typeof addMessageAC>\n    | ReturnType<typeof updateNewMessageTextAC>\n    | ReturnType<typeof followAC>\n    | ReturnType<typeof unfollowAC>\n    | ReturnType<typeof setUsersAC>\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n})\n\ntype RootReducerType = typeof rootReducer // это типизация самой функции === (state: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport const store = createStore(rootReducer)\n\n\n// for DialogsWithHooks\ninterface IRootState extends AppStateType {\n} // нужно называть именно IRootState!!!\n\nexport const selectDialogsPage = (state: IRootState) => state.dialogsPage // вместо mapStateToProps\nexport function useDispatch() { // вместо mapDispatchToProps\n    const dispatch = _useDispatch()\n    return (ac: ActionsTypes) => dispatch(ac)\n}\n\n// благодаря useSelector и useDispatch можно не использовать connect","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Sidebar} from './Sidebar'\nimport {AppStateType} from '../../../redux/reduxStore'\nimport {connect} from 'react-redux'\n\nconst mapStateToProps = (state: AppStateType) => ({\n    friends: state.sidebar.friends\n})\n\nexport const SidebarContainer = connect(mapStateToProps)(Sidebar)","import React from 'react'\nimport style from './Sidebar.module.css'\nimport {FriendType} from '../../../redux/sidebarReducer'\n\ntype SidebarPropsType = {\n    friends: Array<FriendType>\n}\n\nexport function Sidebar(props: SidebarPropsType) {\n    let sidebarFriends = props.friends.map(f => {\n        return (\n            <div className={style.sidebarFriend} key={f.id}>\n                <img src={f.src} alt='friendsPhoto'/>\n                <p className={style.friendName}>{f.name} </p>\n            </div>\n        )\n    })\n    return (\n        <div className={style.sidebarWrapper}>\n            <h3>Friends</h3>\n            {sidebarFriends}\n        </div>\n    )\n}","import React from 'react'\nimport style from './Navbar.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {SidebarContainer} from './Sidebar/SidebarContainer'\n\n\nexport function Navbar() {\n    return (\n        <nav className=\"nav\">\n            <div className={style.item}>\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/dialogs' activeClassName={style.active}>Messages</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/news' activeClassName={style.active}>News</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/music' activeClassName={style.active}>Music</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/settings' activeClassName={style.active}>Settings</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/users' activeClassName={style.active}>Users</NavLink>\n            </div>\n            <div>\n                <SidebarContainer/>\n            </div>\n        </nav>\n    )\n}","import cover from '../../../img/cover.jpg'\nimport React from 'react'\nimport style from './ProfileInfo.module.css'\n\nfunction ProfileInfo() {\n    return (\n        <div>\n            <div>\n                <img className={style.cover} src={cover} alt='coverImage'/>\n            </div>\n            <div>\n                ava + description\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo","import React from 'react'\nimport style from './Post.module.css'\nimport post_image from './../../../../img/penguin.png'\n\ntype PostPropsType = {\n    message: string\n    likesCount: string\n}\n\nfunction Post(props: PostPropsType) {\n    return (\n        <div className={style.item}>\n            <img src={post_image} alt='postImage'/>\n            {props.message}\n            <div>\n                {props.likesCount} <span>❤</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import {addPostAC, PostType, updateNewPostTextAC} from '../../../redux/profileReducer'\nimport {MyPosts} from './MyPosts'\nimport {connect} from 'react-redux'\nimport {ActionsTypes, AppStateType} from '../../../redux/reduxStore'\n\n\ntype MapStatePropsType = {\n    newPostText: string\n    posts: Array<PostType>\n}\n\ntype MapDispatchType = {\n    updateNewPostText: (value: string) => void\n    addPost: () => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    newPostText: state.profilePage.newPostText,\n    posts: state.profilePage.posts\n})\n\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void): MapDispatchType => ({\n    updateNewPostText(value: string) {\n        dispatch(updateNewPostTextAC(value))\n    },\n    addPost() {\n        dispatch(addPostAC())\n    }\n})\n\nexport const MyPostsContainer = connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\n(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react'\nimport style from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport {PostType} from '../../../redux/profileReducer'\n\ntype MyPostsPropsType = {\n    newPostText: string\n    posts: Array<PostType>\n    updateNewPostText: (value: string) => void\n    addPost: () => void\n}\n\nexport function MyPosts(props: MyPostsPropsType) {\n\n    const postsElement = props.posts.map(p => <Post key={p.id} message={p.message}\n                                                    likesCount={p.likesCount}/>)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewPostText(e.currentTarget.value)\n    }\n\n    const onClickAddPost = () => {\n        props.addPost()\n    }\n\n    const onPressEnterAddPost = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault()\n            props.addPost()\n        }\n    }\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea placeholder='Write your post message'\n                          value={props.newPostText}\n                          onChange={onChangeHandler}\n                          onKeyPress={onPressEnterAddPost}\n                />\n                <div>\n                    <button onClick={onClickAddPost}>Add post</button>\n                    <button>Remove</button>\n                </div>\n            </div>\n            <div className={style.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer'\n\ntype ProfilePropsType = {}\n\nexport function Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo/>\n            <MyPostsContainer/>\n        </div>\n    )\n}","import React from 'react'\nimport logo from '../../img/planet.png'\nimport style from './Header.module.css'\n\nexport function Header() {\n    return (\n        <header className={style.header}>\n            <img src={logo} alt='logoImage'/>\n        </header>\n    )\n}","import {connect} from 'react-redux'\nimport {Users} from './Users'\nimport {ActionsTypes, AppStateType} from '../../redux/reduxStore'\nimport {followAC, setUsersAC, unfollowAC, UserType} from '../../redux/usersReducer'\n\n\ntype MapStatePropsType = {\n    users: Array<UserType>\n}\n\ntype MapDispatchType = {\n    setUsers: (users: Array<UserType>) => void\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    users: state.usersPage.users\n})\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void): MapDispatchType => ({\n    follow: (userId: number) => {\n        dispatch(followAC(userId))\n    },\n    unfollow: (userId: number) => {\n        dispatch(unfollowAC(userId))\n    },\n    setUsers: (users: Array<UserType>) => {\n        dispatch(setUsersAC(users))\n    }\n})\n\nexport const UsersContainer = connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\n(mapStateToProps, mapDispatchToProps)(Users)","import React from 'react'\nimport {UserType} from '../../redux/usersReducer'\nimport * as axios from 'axios'\n\ntype UsersPropsType = {\n    users: Array<UserType>\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: Array<UserType>) => void\n}\n\nexport function Users(props: UsersPropsType) {\n    const getUsers =() => {\n        if (props.users.length === 0) {\n            axios.default.get('https://social-network.samuraijs.com/api/1.0/users').then((response) => {\n                props.setUsers(response.data.items)\n            })\n        }\n    }\n\n    return (\n        <div>\n            <button onClick={getUsers}>Get Users</button>\n            {\n                props.users.map((u) => {\n                    return (\n                        <div key={u.id}>\n                            <div>\n                                <img width='200px' alt='userPhoto' src={u.photos.small\n                                    ? u.photos.small\n                                    : 'https://i.pinimg.com/originals/8e/b0/fd/8eb0fdac7230089db2fa51f53e53397e.jpg'} />\n                            </div>\n                            {u.followed\n                                ? <button onClick={() => props.unfollow(u.id)}>Unfollow</button>\n                                : <button onClick={() => props.follow(u.id)}>Follow</button>}\n                            <div>{u.name}</div>\n                            <div>{u.status}</div>\n                            <div>u.location.city</div>\n                            <div>u.location.country</div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}","import React from 'react'\nimport style from './DialogItem.module.css'\nimport {NavLink} from 'react-router-dom'\n\ntype DialogItemType = {\n    id: string\n    name: string\n}\n\nexport function DialogItem(props: DialogItemType) {\n    return (\n        <div className={style.dialog}>\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>{props.name}</NavLink>\n        </div>\n    )\n}","import React from 'react'\nimport style from './Message.module.css'\nimport {AuthorMessageType} from '../DialogsContainer'\n\ntype MessageType = {\n    id: string\n    message: string\n    author: AuthorMessageType\n}\n\nexport function Message(props: MessageType) {\n    return (\n        <div className={style.wrapperMessage}>\n            <img src={props.author.src} className={style.avatar} alt='authorImage'/>\n            <div className={style.message}>\n                <div className={style.author}>{props.author.name}</div>\n                <div>\n                    <span className={style.messageText}>{props.message}</span>\n                </div>\n            </div>\n        </div>\n    )\n}","import {addMessageAC, updateNewMessageTextAC} from '../../redux/dialogsReducer'\nimport {Dialogs} from './Dialogs'\nimport {connect} from 'react-redux'\nimport {ActionsTypes, AppStateType} from '../../redux/reduxStore'\n\nexport type AuthorMessageType = {\n    name: string\n    src: string\n}\n\nexport type DialogType = {\n    id: string\n    name: string\n}\n\nexport type MessageType = {\n    id: string\n    message: string\n    author: AuthorMessageType\n}\n\ntype MapStatePropsType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\ntype MapDispatchType = {\n    updateNewMessageText: (value: string) => void\n    addMessage: () => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    newMessageText: state.dialogsPage.newMessageText\n})\n\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void): MapDispatchType => ({\n    updateNewMessageText(value: string) {\n        dispatch(updateNewMessageTextAC(value))\n    },\n    addMessage() {\n        dispatch(addMessageAC())\n    }\n})\n\nexport const DialogsContainer = connect<MapStatePropsType, MapDispatchType, {}, AppStateType>\n(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from 'react'\nimport style from './Dialogs.module.css'\nimport {DialogType, MessageType} from './DialogsContainer'\nimport {DialogItem} from './DialogItem/DialogItem'\nimport {Message} from './Message/Message'\n\ntype DialogsPropsType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    newMessageText: string\n    updateNewMessageText: (value: string) => void\n    addMessage: () => void\n}\n\nexport function Dialogs(props: DialogsPropsType) {\n\n    const dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\n    const messagesElements = props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}\n                                                              author={m.author}/>)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewMessageText(e.currentTarget.value)\n    }\n\n    const onSendMessageClick = () => {\n        props.addMessage()\n    }\n\n    const onPressEnterSendMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault()\n            props.addMessage()\n        }\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={style.messages}>\n                <div>{messagesElements}</div>\n                <div className={style.sendingMessage}>\n                    <textarea placeholder='Write your message'\n                              value={props.newMessageText}\n                              onChange={onChangeHandler}\n                              onKeyDown={onPressEnterSendMessage}\n                    />\n                    <div>\n                        <button onClick={onSendMessageClick}>Send</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './App.css'\nimport {Route} from 'react-router-dom'\nimport {Navbar} from './components/Navbar/Navbar'\nimport {Profile} from './components/Profile/Profile'\nimport {Header} from './components/Header/Header'\nimport { UsersContainer } from './components/Users/UsersContainer'\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\"\n\n\nexport function App() {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar />\n            <div className='app-wrapper-content'>\n                <Route path='/profile'\n                       render={() => <Profile />}\n                />\n                <Route path='/dialogs'\n                       render={() => <DialogsContainer />}\n                />\n                <Route path='/users'\n                       render={() => <UsersContainer />}\n                />\n            </div>\n        </div>\n    );\n}\n","import './index.css'\nimport {store} from './redux/reduxStore'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport {App} from './App'\nimport {HashRouter} from 'react-router-dom'\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\"};"],"sourceRoot":""}