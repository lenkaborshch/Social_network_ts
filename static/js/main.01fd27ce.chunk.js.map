{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Dialogs/DialogItem/DialogItem.module.css","img/cover.jpg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","img/penguin.png","img/planet.png","components/Header/Header.module.css","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/reduxStore.ts","serviceWorker.ts","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Header/Header.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","posts","id","v1","message","likesCount","newPostText","dialogs","name","messages","author","src","newMessageText","friends","reducers","combineReducers","profilePage","state","action","type","newPost","push","newText","dialogsPage","newMessage","sidebar","store","createStore","Boolean","window","location","hostname","match","Sidebar","props","sidebarFriends","map","f","className","style","sidebarFriend","key","alt","friendName","sidebarWrapper","Navbar","item","to","activeClassName","active","ProfileInfo","cover","Post","post_image","MyPosts","postsElement","p","placeholder","value","onChange","e","updateNewPostText","currentTarget","onKeyPress","preventDefault","addPost","onClick","MyPostsContainer","getState","dispatch","Profile","Header","header","logo","DialogItem","dialog","Message","wrapperMessage","avatar","messageText","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","sendingMessage","updateNewMessageText","onKeyDown","addMessage","DialogsContainer","App","path","render","rerenderEntireThree","ReactDOM","bind","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.01fd27ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"Message_wrapperMessage__24PeH\",\"message\":\"Message_message__1MOXo\",\"avatar\":\"Message_avatar__2zGiU\",\"author\":\"Message_author__Te61r\",\"messageText\":\"Message_messageText__1G9P6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"sendingMessage\":\"Dialogs_sendingMessage__2XR3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__1UkE2\",\"sidebarFriend\":\"Sidebar_sidebarFriend___R4bw\",\"friendName\":\"Sidebar_friendName__1T17j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3tDA2\",\"active\":\"DialogItem_active__2qnc5\"};","module.exports = __webpack_public_path__ + \"static/media/cover.258dc82d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileInfo_cover__301bp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","module.exports = __webpack_public_path__ + \"static/media/penguin.20594e02.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.1ab0b265.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","import {ActionsTypes} from './reduxStore';\nimport {v1} from 'uuid'\n\nexport type PostType = {\n    id: string\n    message: string\n    likesCount: string\n}\n\nexport type ProfilePageType = {\n        posts: Array<PostType>\n        newPostText: string\n}\n\nconst ADD_POST = 'ADD_POST'\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\n\nconst initialState: ProfilePageType = {\n        posts: [\n            {id: v1(), message: 'Hey', likesCount: '20'},\n            {id: v1(), message: 'How are you?', likesCount: '2'}\n        ],\n        newPostText: ''\n}\n\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost: PostType = {\n                id: v1(),\n                message: state.newPostText,\n                likesCount: '0'\n            }\n            state.posts.push(newPost)\n            state.newPostText = ''\n            return state\n        }\n        case UPDATE_NEW_POST_TEXT: {\n            state.newPostText = action.newText\n            return state\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const addPostAC = () => ({type: ADD_POST}) as const\n\nexport const updateNewPostTextAC = (newPostText: string) => ({\n    type: UPDATE_NEW_POST_TEXT,\n    newText: newPostText\n}) as const","import {v1} from 'uuid';\nimport {ActionsTypes} from './reduxStore';\n\nexport type DialogType = {\n    id: string\n    name: string\n}\n\nexport type AuthorMessage = {\n    name: string\n    src: string\n}\n\nexport type MessageType = {\n    id: string\n    message: string\n    author: AuthorMessage\n}\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\nconst SEND_MESSAGE = 'SEND_MESSAGE'\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\n\nconst initialState: DialogsPageType = {\n    dialogs: [\n        {id: v1(), name: 'Vadim'},\n        {id: v1(), name: 'Mama'},\n        {id: v1(), name: 'Papa'},\n        {id: v1(), name: 'Yurii'},\n        {id: v1(), name: 'Nik'},\n    ],\n    messages: [\n        {\n            id: v1(),\n            message: 'Hey',\n            author: {\n                name: 'Vadim',\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\n            }\n        },\n        {\n            id: v1(),\n            message: 'How are you?',\n            author: {\n                name: 'Me',\n                src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\n            }\n        },\n        {\n            id: v1(),\n            message: 'Good luck',\n            author: {\n                name: 'Vadim',\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\n            }\n        },\n    ],\n    newMessageText: ''\n}\n\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case SEND_MESSAGE: {\n            let newMessage = {\n                id: v1(),\n                message: state.newMessageText,\n                author: {\n                    name: 'Me',\n                    src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\n                }\n            }\n            state.messages.push(newMessage);\n            state.newMessageText = ''\n            return state\n        }\n        case UPDATE_NEW_MESSAGE_TEXT: {\n            state.newMessageText = action.newMessageText\n            return state\n        }\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = () => ({type: SEND_MESSAGE}) as const\n\nexport const updateNewMessageTextAC = (newText: string) => ({\n    type: UPDATE_NEW_MESSAGE_TEXT,\n    newMessageText: newText\n}) as const","import {ActionsTypes} from './reduxStore';\nimport {v1} from 'uuid';\n\nexport type FriendType = {\n    id: string\n    name: string\n    src: string\n}\n\nexport type SidebarType = {\n    friends: Array<FriendType>\n}\n\nconst initialState = {\n    friends: [\n        {\n            id: v1(),\n            name: 'Vadim',\n            src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\n        },\n        {\n            id: v1(),\n            name: 'Busya',\n            src: 'https://i.pinimg.com/originals/1c/ba/1e/1cba1e5e40356f6edb0235c8a09a07d5.jpg'\n        },\n        {\n            id: v1(),\n            name: 'Freud',\n            src: 'https://pbs.twimg.com/profile_images/1173161429266030592/lJCNA_JC_400x400.jpg'\n        }\n    ]\n}\n\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes) => {\n    return state\n}","import {combineReducers, createStore} from 'redux';\nimport {addPostAC, profileReducer, updateNewPostTextAC, ProfilePageType} from './profileReducer';\nimport {addMessageAC, dialogsReducer, updateNewMessageTextAC, DialogsPageType} from './dialogsReducer';\nimport {sidebarReducer, SidebarType} from './sidebarReducer';\n\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    sidebar: SidebarType\n}\n\nexport type ActionsTypes =\n    ReturnType<typeof addPostAC>\n    | ReturnType<typeof updateNewPostTextAC>\n    | ReturnType<typeof addMessageAC>\n    | ReturnType<typeof updateNewMessageTextAC>\n\nconst reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer\n})\n\nexport const store = createStore(reducers)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport style from './Sidebar.module.css';\nimport {SidebarType} from '../../../redux/sidebarReducer';\n\ntype SidebarPropsType = {\n    state: SidebarType\n}\n\nfunction Sidebar(props: SidebarPropsType) {\n    let sidebarFriends = props.state.friends.map(f => {\n        return (\n            <div className={style.sidebarFriend} key={f.id}>\n                <img src={f.src} alt='friendsPhoto'/>\n                <p className={style.friendName}>{f.name} </p>\n            </div>\n        )\n    })\n    return (\n        <div className={style.sidebarWrapper}>\n            <h3>Friends</h3>\n            {sidebarFriends}\n        </div>\n    )\n}\n\nexport default Sidebar;","import React from 'react';\nimport style from './Navbar.module.css';\nimport {NavLink} from 'react-router-dom';\nimport Sidebar from './Sidebar/Sidebar';\nimport {SidebarType} from '../../redux/sidebarReducer';\n\ntype NavbarPropsType = {\n    state: SidebarType\n}\n\nexport function Navbar(props: NavbarPropsType) {\n    return (\n        <nav className=\"nav\">\n            <div className={style.item}>\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/dialogs' activeClassName={style.active}>Messages</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/news' activeClassName={style.active}>News</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/music' activeClassName={style.active}>Music</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/settings' activeClassName={style.active}>Settings</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to='/users' activeClassName={style.active}>Users</NavLink>\n            </div>\n            <div>\n                <Sidebar state={props.state}/>\n            </div>\n        </nav>\n    )\n}","import cover from '../../../img/cover.jpg';\nimport React from 'react';\nimport style from './ProfileInfo.module.css';\n\nfunction ProfileInfo() {\n    return (\n        <div>\n            <div>\n                <img className={style.cover} src={cover} alt='coverImage'/>\n            </div>\n            <div>\n                ava + description\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport style from './Post.module.css';\nimport post_image from './../../../../img/penguin.png';\n\ntype PostPropsType = {\n    message: string\n    likesCount: string\n}\n\nfunction Post(props: PostPropsType) {\n    return (\n        <div className={style.item}>\n            <img src={post_image} alt='postImage'/>\n            {props.message}\n            <div>\n                {props.likesCount} <span>❤</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React, {ChangeEvent} from 'react';\nimport style from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {ProfilePageType, PostType} from '../../../redux/profileReducer';\nimport {addPostAC, updateNewPostTextAC} from '../../../redux/profileReducer';\nimport {ActionsTypes} from '../../../redux/reduxStore';\nimport {CombinedState, Store} from \"redux\";\nimport {DialogsPageType} from \"../../../redux/dialogsReducer\";\nimport {SidebarType} from \"../../../redux/sidebarReducer\";\n\ntype MyPostsPropsType = {\n    newPostText: string\n    posts: Array<PostType>\n    updateNewPostText: (value: string) => void\n    addPost: () => void\n}\n\nexport function MyPosts(props: MyPostsPropsType) {\n\n    const postsElement = props.posts.map(p => <Post key={p.id} message={p.message}\n                                                    likesCount={p.likesCount}/>);\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewPostText(e.currentTarget.value)\n    }\n\n    const onClickAddPost = () => {\n        props.addPost()\n    }\n\n    const onPressEnterAddPost = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault()\n            props.addPost()\n        }\n    }\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea placeholder='Write your post message'\n                          value={props.newPostText}\n                          onChange={onChangeHandler}\n                          onKeyPress={onPressEnterAddPost}\n                />\n                <div>\n                    <button onClick={onClickAddPost}>Add post</button>\n                    <button>Remove</button>\n                </div>\n            </div>\n            <div className={style.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react';\nimport style from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {ProfilePageType} from '../../../redux/profileReducer';\nimport {addPostAC, updateNewPostTextAC} from '../../../redux/profileReducer';\nimport {ActionsTypes} from '../../../redux/reduxStore';\nimport {CombinedState, Store} from \"redux\";\nimport {DialogsPageType} from \"../../../redux/dialogsReducer\";\nimport {SidebarType} from \"../../../redux/sidebarReducer\";\nimport {MyPosts} from \"./MyPosts\";\n\ntype MyPostsPropsType = {\n    profilePage: ProfilePageType\n    dispatch: (action: ActionsTypes) => void\n    store: Store<CombinedState<{ profilePage: ProfilePageType; dialogsPage: DialogsPageType; sidebar: SidebarType; }>>\n}\n\nexport function MyPostsContainer(props: MyPostsPropsType) {\n\n    const state = props.store.getState().profilePage\n\n    const onChangePostText = (value: string) => {\n        props.dispatch(updateNewPostTextAC(value));\n    }\n\n    const clickAddPost = () => {\n        props.dispatch(addPostAC());\n    }\n\n    return (\n        <MyPosts newPostText={state.newPostText} posts={state.posts}\n                 updateNewPostText={onChangePostText} addPost={clickAddPost}/>\n    )\n}","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport {ProfilePageType} from '../../redux/profileReducer';\nimport {ActionsTypes} from '../../redux/reduxStore';\nimport {CombinedState, Store} from \"redux\";\nimport {DialogsPageType} from \"../../redux/dialogsReducer\";\nimport {SidebarType} from \"../../redux/sidebarReducer\";\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\n\ntype ProfilePropsType = {\n    profilePage: ProfilePageType\n    dispatch: (action: ActionsTypes) => void\n    store: Store<CombinedState<{ profilePage: ProfilePageType; dialogsPage: DialogsPageType; sidebar: SidebarType; }>>\n}\n\nexport function Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo/>\n            <MyPostsContainer profilePage={props.profilePage}\n                     dispatch={props.dispatch}\n                     store={props.store}/>\n        </div>\n    )\n}","import React from 'react';\nimport logo from '../../img/planet.png';\nimport style from './Header.module.css';\n\nexport function Header() {\n    return (\n        <header className={style.header}>\n            <img src={logo} alt='logoImage'/>\n        </header>\n    )\n}","import React from 'react';\nimport style from './DialogItem.module.css';\nimport {NavLink} from 'react-router-dom';\n\ntype DialogItemType = {\n    id: string\n    name: string\n}\n\nexport function DialogItem(props: DialogItemType) {\n    return (\n        <div className={style.dialog}>\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>{props.name}</NavLink>\n        </div>\n    )\n}","import React from 'react';\nimport style from './Message.module.css';\nimport {AuthorMessage} from '../../../redux/dialogsReducer';\n\ntype MessageType = {\n    message: string\n    author: AuthorMessage\n}\n\nexport function Message(props: MessageType) {\n    return (\n        <div className={style.wrapperMessage}>\n            <img src={props.author.src} className={style.avatar} alt='authorImage'/>\n            <div className={style.message}>\n                <div className={style.author}>{props.author.name}</div>\n                <div>\n                    <span className={style.messageText}>{props.message}</span>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react'\nimport style from './Dialogs.module.css'\nimport {DialogsPageType, DialogType, MessageType} from '../../redux/dialogsReducer'\nimport { DialogItem } from './DialogItem/DialogItem'\nimport { Message } from './Message/Message'\n\ntype DialogsPropsType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    newMessageText: string\n    updateNewMessageText: (value: string) => void\n    addMessage: () => void\n}\n\nexport function Dialogs(props: DialogsPropsType) {\n\n    const dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\n    const messagesElements = props.messages.map(m => <Message key={m.id} message={m.message}\n                                                                          author={m.author}/>)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewMessageText(e.currentTarget.value)\n    }\n\n    const onSendMessageClick = () => {\n        props.addMessage()\n    }\n\n    const onPressEnterSendMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault()\n            props.addMessage()\n        }\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={style.messages}>\n                <div>{messagesElements}</div>\n                <div className={style.sendingMessage}>\n                    <textarea placeholder='Write your message'\n                              value={props.newMessageText}\n                              onChange={onChangeHandler}\n                              onKeyDown={onPressEnterSendMessage}\n                    />\n                    <div>\n                        <button onClick={onSendMessageClick}>Send</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react'\nimport style from './Dialogs.module.css'\nimport {DialogsPageType} from '../../redux/dialogsReducer'\nimport {DialogItem} from './DialogItem/DialogItem'\nimport {Message} from './Message/Message'\nimport {addMessageAC, updateNewMessageTextAC} from '../../redux/dialogsReducer';\nimport {ActionsTypes} from '../../redux/reduxStore'\nimport {addPostAC, ProfilePageType} from '../../redux/profileReducer';\nimport {Dialogs} from './Dialogs'\nimport {CombinedState, Store} from \"redux\";\nimport {SidebarType} from \"../../redux/sidebarReducer\";\n\ntype DialogsPropsType = {\n    store: Store<CombinedState<{ profilePage: ProfilePageType; dialogsPage: DialogsPageType; sidebar: SidebarType; }>>\n}\n\nexport function DialogsContainer(props: DialogsPropsType) {\n\n    const state = props.store.getState().dialogsPage\n\n    const onChangeMessageText = (value: string) => {\n        props.store.dispatch(updateNewMessageTextAC(value))\n    }\n\n    const onSendMessage = () => {\n        props.store.dispatch(addMessageAC())\n    }\n\n    return (\n        <Dialogs dialogs={state.dialogs} messages={state.messages} newMessageText={state.newMessageText}\n                 updateNewMessageText={onChangeMessageText} addMessage={onSendMessage}/>\n    )\n}","import React from 'react'\nimport './App.css'\nimport {ActionsTypes, RootStateType} from './redux/reduxStore'\nimport {Route} from 'react-router-dom'\nimport {Navbar} from './components/Navbar/Navbar'\nimport {Profile} from './components/Profile/Profile'\nimport {Header} from './components/Header/Header';\nimport {CombinedState, Store} from 'redux'\nimport {ProfilePageType} from \"./redux/profileReducer\";\nimport {DialogsPageType} from './redux/dialogsReducer'\nimport {SidebarType} from './redux/sidebarReducer'\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\n\ntype AppPropsType = {\n    state: RootStateType\n    dispatch: (action: ActionsTypes) => void\n    store: Store<CombinedState<{ profilePage: ProfilePageType; dialogsPage: DialogsPageType; sidebar: SidebarType; }>>\n}\n\nexport function App(props: AppPropsType) {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar state={props.state.sidebar}/>\n            <div className='app-wrapper-content'>\n                <Route path='/profile'\n                       render={() => <Profile store={props.store}\n                                              profilePage={props.state.profilePage}\n                                              dispatch={props.dispatch}/>}\n                />\n                <Route path='/dialogs'\n                       render={() => <DialogsContainer store={props.store}/>}\n                />\n            </div>\n        </div>\n    );\n}\n","import './index.css'\nimport {store} from './redux/reduxStore'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport {App} from './App'\nimport {RootStateType} from './redux/reduxStore'\nimport {HashRouter} from 'react-router-dom'\n\n\nexport const rerenderEntireThree = (state: RootStateType) => {\n    ReactDOM.render(\n        <HashRouter>\n            <App state={state} dispatch={store.dispatch.bind(store)} store={store}/>\n        </HashRouter>,\n        document.getElementById('root'))\n}\n\nrerenderEntireThree(store.getState())\nstore.subscribe(() => {\n    const state = store.getState()\n    rerenderEntireThree(state)\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}