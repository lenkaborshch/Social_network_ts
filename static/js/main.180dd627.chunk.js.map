{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Dialogs/DialogItem/DialogItem.module.css","img/cover.jpg","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","img/penguin.png","img/planet.png","components/Header/Header.module.css","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/reduxStore.ts","serviceWorker.ts","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","posts","id","v1","message","likesCount","newPostText","dialogs","name","messages","author","src","newMessageText","friends","reducers","combineReducers","profilePage","state","action","type","newPost","push","newText","dialogsPage","newMessage","sidebar","store","createStore","Boolean","window","location","hostname","match","Sidebar","props","sidebarFriends","map","f","className","style","sidebarFriend","key","alt","friendName","sidebarWrapper","Navbar","item","to","activeClassName","active","ProfileInfo","cover","Post","post_image","MyPosts","postsElement","p","placeholder","value","onChange","e","dispatch","currentTarget","onKeyPress","preventDefault","onClick","Profile","DialogItem","dialog","Message","wrapperMessage","avatar","messageText","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","sendingMessage","onKeyDown","Header","header","logo","App","path","render","rerenderEntireThree","ReactDOM","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.180dd627.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3IGaR\",\"item\":\"Navbar_item__h95WS\",\"active\":\"Navbar_active__1PjXT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"Message_wrapperMessage__2vPAI\",\"message\":\"Message_message__1yLU-\",\"avatar\":\"Message_avatar__3rc1s\",\"author\":\"Message_author__iUgK8\",\"messageText\":\"Message_messageText__18eup\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2GIgq\",\"dialogsItems\":\"Dialogs_dialogsItems__U9Eac\",\"messages\":\"Dialogs_messages__2Eq2K\",\"dialog\":\"Dialogs_dialog__s_4VI\",\"active\":\"Dialogs_active__2mBfT\",\"sendingMessage\":\"Dialogs_sendingMessage__qt9Rj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__pTjk7\",\"sidebarFriend\":\"Sidebar_sidebarFriend__--or2\",\"friendName\":\"Sidebar_friendName__1Z1q2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3tYG5\",\"active\":\"DialogItem_active__1CKxp\"};","module.exports = __webpack_public_path__ + \"static/media/cover.258dc82d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileInfo_cover__32cUv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1qEXI\"};","module.exports = __webpack_public_path__ + \"static/media/penguin.20594e02.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.1ab0b265.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2mPf9\"};","import {ActionsTypes} from './reduxStore';\r\nimport {v1} from 'uuid'\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nexport type ProfilePageType = {\r\n        posts: Array<PostType>\r\n        newPostText: string\r\n}\r\n\r\nconst ADD_POST = 'ADD_POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\r\n\r\nconst initialState: ProfilePageType = {\r\n        posts: [\r\n            {id: v1(), message: 'Hey', likesCount: '20'},\r\n            {id: v1(), message: 'How are you?', likesCount: '2'}\r\n        ],\r\n        newPostText: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: '0'\r\n            }\r\n            state.posts.push(newPost)\r\n            state.newPostText = ''\r\n            return state\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            state.newPostText = action.newText\r\n            return state\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPostAC = () => ({type: ADD_POST}) as const\r\n\r\nexport const updateNewPostTextAC = (newPostText: string) => ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText: newPostText\r\n}) as const","import {v1} from 'uuid';\r\nimport {ActionsTypes} from './reduxStore';\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type AuthorMessage = {\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    author: AuthorMessage\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\r\n\r\nconst initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Vadim'},\r\n        {id: v1(), name: 'Mama'},\r\n        {id: v1(), name: 'Papa'},\r\n        {id: v1(), name: 'Yurii'},\r\n        {id: v1(), name: 'Nik'},\r\n    ],\r\n    messages: [\r\n        {\r\n            id: v1(),\r\n            message: 'Hey',\r\n            author: {\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            }\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: 'How are you?',\r\n            author: {\r\n                name: 'Me',\r\n                src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n            }\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: 'Good luck',\r\n            author: {\r\n                name: 'Vadim',\r\n                src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n            }\r\n        },\r\n    ],\r\n    newMessageText: ''\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let newMessage = {\r\n                id: v1(),\r\n                message: state.newMessageText,\r\n                author: {\r\n                    name: 'Me',\r\n                    src: 'https://volyn.tabloyid.com/upload/news/1/2019-06/155980298916/1_worlds-most-beautiful-cats-1-57fb53b6755fc__700.jpg'\r\n                }\r\n            }\r\n            state.messages.push(newMessage);\r\n            state.newMessageText = ''\r\n            return state\r\n        }\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            state.newMessageText = action.newMessageText\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessageAC = () => ({type: SEND_MESSAGE}) as const\r\n\r\nexport const updateNewMessageTextAC = (newText: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_TEXT,\r\n    newMessageText: newText\r\n}) as const","import {ActionsTypes} from './reduxStore';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FriendType = {\r\n    id: string\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {\r\n            id: v1(),\r\n            name: 'Vadim',\r\n            src: 'https://i.pinimg.com/originals/f4/d2/96/f4d2961b652880be432fb9580891ed62.png'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Busya',\r\n            src: 'https://i.pinimg.com/originals/1c/ba/1e/1cba1e5e40356f6edb0235c8a09a07d5.jpg'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Freud',\r\n            src: 'https://pbs.twimg.com/profile_images/1173161429266030592/lJCNA_JC_400x400.jpg'\r\n        }\r\n    ]\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes) => {\r\n    return state\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {addPostAC, profileReducer, updateNewPostTextAC, ProfilePageType} from './profileReducer';\r\nimport {addMessageAC, dialogsReducer, updateNewMessageTextAC, DialogsPageType} from './dialogsReducer';\r\nimport {sidebarReducer, SidebarType} from './sidebarReducer';\r\n\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: SidebarType\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: RootStateType\r\n    _callSubscriber: (state: RootStateType) => void\r\n    getState: () => RootStateType\r\n    subscribe: (observer: (state: RootStateType) => void) => void\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof addMessageAC>\r\n    | ReturnType<typeof updateNewMessageTextAC>\r\n\r\nconst reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer\r\n})\r\n\r\nexport const store = createStore(reducers)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport style from './Sidebar.module.css';\r\nimport {SidebarType} from '../../../redux/sidebarReducer';\r\n\r\ntype SidebarPropsType = {\r\n    state: SidebarType\r\n}\r\n\r\nfunction Sidebar(props: SidebarPropsType) {\r\n    let sidebarFriends = props.state.friends.map(f => {\r\n        return (\r\n            <div className={style.sidebarFriend} key={f.id}>\r\n                <img src={f.src} alt='friendsPhoto'/>\r\n                <p className={style.friendName}>{f.name} </p>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className={style.sidebarWrapper}>\r\n            <h3>Friends</h3>\r\n            {sidebarFriends}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport style from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Sidebar from './Sidebar/Sidebar';\r\nimport {SidebarType} from '../../redux/sidebarReducer';\r\n\r\ntype NavbarPropsType = {\r\n    state: SidebarType\r\n}\r\n\r\nexport function Navbar(props: NavbarPropsType) {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div className={style.item}>\r\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/dialogs' activeClassName={style.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/news' activeClassName={style.active}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/music' activeClassName={style.active}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/settings' activeClassName={style.active}>Settings</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/users' activeClassName={style.active}>Users</NavLink>\r\n            </div>\r\n            <div>\r\n                <Sidebar state={props.state}/>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import cover from '../../../img/cover.jpg';\r\nimport React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={style.cover} src={cover} alt='coverImage'/>\r\n            </div>\r\n            <div>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport post_image from './../../../../img/penguin.png';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={post_image} alt='postImage'/>\r\n            {props.message}\r\n            <div>\r\n                {props.likesCount} <span>❤</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {ProfilePageType} from '../../../redux/profileReducer';\r\nimport {addPostAC, updateNewPostTextAC} from '../../../redux/profileReducer';\r\nimport {ActionsTypes} from '../../../redux/reduxStore';\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nexport function MyPosts(props: MyPostsPropsType) {\r\n\r\n    const postsElement = props.profilePage.posts.map(p => <Post key={p.id} message={p.message}\r\n                                                                likesCount={p.likesCount}/>);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.dispatch(updateNewPostTextAC(e.currentTarget.value));\r\n    }\r\n\r\n    const onClickAddPost = () => {\r\n        props.dispatch(addPostAC());\r\n    }\r\n\r\n    const onPressEnterAddPost = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            props.dispatch(addPostAC())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <div>\r\n                <textarea placeholder='Write your post message'\r\n                          value={props.profilePage.newPostText}\r\n                          onChange={onChangeHandler}\r\n                          onKeyPress={onPressEnterAddPost}\r\n                />\r\n                <div>\r\n                    <button onClick={onClickAddPost}>Add post</button>\r\n                    <button>Remove</button>\r\n                </div>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ProfilePageType} from '../../redux/profileReducer';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport { ActionsTypes } from '../../redux/reduxStore';\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts profilePage={props.profilePage}\r\n                     dispatch={props.dispatch}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Message.module.css';\r\nimport {AuthorMessage} from '../../../redux/dialogsReducer';\r\n\r\ntype MessageType = {\r\n    message: string\r\n    author: AuthorMessage\r\n}\r\n\r\nexport function Message(props: MessageType) {\r\n    return (\r\n        <div className={style.wrapperMessage}>\r\n            <img src={props.author.src} className={style.avatar} alt='authorImage'/>\r\n            <div className={style.message}>\r\n                <div className={style.author}>{props.author.name}</div>\r\n                <div>\r\n                    <span className={style.messageText}>{props.message}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport style from './Dialogs.module.css'\r\nimport {DialogsPageType} from '../../redux/dialogsReducer'\r\nimport { DialogItem } from './DialogItem/DialogItem'\r\nimport { Message } from './Message/Message'\r\nimport {addMessageAC, updateNewMessageTextAC} from '../../redux/dialogsReducer';\r\nimport { ActionsTypes } from '../../redux/reduxStore'\r\nimport {addPostAC} from '../../redux/profileReducer';\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}\r\n                                                                          author={m.author}/>)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.dispatch(updateNewMessageTextAC(e.currentTarget.value))\r\n    }\r\n\r\n    const onSendMessageClick = () => {\r\n        props.dispatch(addMessageAC())\r\n    }\r\n\r\n    const onPressEnterSendMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            props.dispatch(addMessageAC())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={style.sendingMessage}>\r\n                    <textarea placeholder='Write your message'\r\n                              value={props.dialogsPage.newMessageText}\r\n                              onChange={onChangeHandler}\r\n                              onKeyDown={onPressEnterSendMessage}\r\n                    />\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport logo from '../../img/planet.png';\r\nimport style from './Header.module.css';\r\n\r\nexport function Header() {\r\n    return (\r\n        <header className={style.header}>\r\n            <img src={logo} alt='logoImage'/>\r\n        </header>\r\n    )\r\n}","import React from 'react'\nimport './App.css'\nimport {ActionsTypes, RootStateType} from './redux/reduxStore'\nimport {Route} from 'react-router-dom'\nimport { Navbar } from './components/Navbar/Navbar'\nimport { Profile } from './components/Profile/Profile'\nimport { Dialogs } from './components/Dialogs/Dialogs';\nimport { Header } from './components/Header/Header';\n\ntype AppPropsType = {\n    state: RootStateType\n    dispatch: (action: ActionsTypes) => void\n}\n\nexport function App(props: AppPropsType) {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar state={props.state.sidebar}/>\n            <div className='app-wrapper-content'>\n                <Route path='/profile'\n                       render={() => <Profile profilePage={props.state.profilePage}\n                                              dispatch={props.dispatch}/>}\n                />\n                <Route path='/dialogs'\n                       render={() => <Dialogs dialogsPage={props.state.dialogsPage}\n                                              dispatch={props.dispatch}/>}\n                />\n            </div>\n        </div>\n    );\n}\n","import './index.css'\nimport {store} from './redux/reduxStore'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport {App} from './App'\nimport {RootStateType} from './redux/reduxStore'\nimport {HashRouter} from 'react-router-dom'\n\n\nexport const rerenderEntireThree = (state: RootStateType) => {\n    ReactDOM.render(\n        <HashRouter>\n            <App state={state} dispatch={store.dispatch.bind(store)} />\n        </HashRouter>,\n        document.getElementById('root'))\n}\n\nrerenderEntireThree(store.getState())\nstore.subscribe(() => {\n    const state = store.getState()\n    rerenderEntireThree(state)\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}